exit
library(RevoScaleR)
rxIm
rxImportToXdf("C:/Users/srram/Desktop/CleanedOutput.csv","C:/Users/srram/Desktop/CleanedOutput.xdf")
Loans <- read.csv("C:/Users/srram/Desktop/CleanedOutput.csv",header = TRUE)
Loans
library(dplyr) library(RevoScaleR) library(ggplot2)
convert.factor <- function(x) {     if (is.character(Loans[, x])) {         # print("trying to convert ... 2..")         as.factor(Loans[, x])     } } name.list <- function(x) {     names <- names(x)     len <- length(names)     names[-len] } lapply(c("Purpose", "HomeOwnshp", "YearsJob"), as.factor) names(Loans) #n <- name.list(Loans) attach(Loans) ##Start Cleaning up and Transforming the data Loans <- filter(Loans, !is.na(AnnlIncome)) Loans <- filter(Loans, !is.na(CrdtScore)) Loans <- filter(Loans, Bankrptcies != "NA") Loans <- filter(Loans, TaxLiens != "NA") Loans$MthlyDebt <- as.double(sub(",", "", substring(Loans$MthlyDebt, 2,))) Loans$OpenCrdt <- as.integer(Loans$OpenCrdt) Loans <- filter(Loans, OpenCrdt > 0) Loans <- filter(Loans, AnnlIncome > 0) Loans$CrdtScore <- as.integer(substring(Loans$CrdtScore, 1, 3)) Loans <- mutate(Loans, MthsLastDlqntnew = ifelse(is.na(MthsLastDlqnt) & CrdtProbs == 0, 0, MthsLastDlqnt)) Loans <- mutate(Loans, CrdtProbsnew = ifelse(CrdtProbs >= 1, 1, 0)) Loans <- Loans %>% mutate(Purpose.new = ifelse(Purpose != "Debt Consolidation", ifelse(Purpose == "Business Loan", "Business Loan", "NDC Personal"), "Debt Consolidation")) Loans <- mutate(Loans, risk =                 ifelse((CrdtProbs >= 1 | MthsLastDlqntnew > 2) & Purpose.new == "Non Debt Consolidation", 2,                        ifelse(Purpose.new == "Debt Consolidation" & MthsLastDlqntnew > 24, 2, CrdtProbsnew))) #summary(Loans) Loans <- Loans %>% filter(Amount < 40000 & AnnlIncome < 250000 & CrdtBal < 50000 & OpenCrdt < 250000 & MthsLastDlqnt != -1) Loans.coff <- Loans %>% filter(Amount != 99999999 & AnnlIncome < 250000 & CrdtBal < 50000 & OpenCrdt < 150000 & AnnlIncome != -1) #summary(Loans.coff) #ggplot(Loans, aes(YearsJob)) + #geom_bar(aes(fill = Status)) Loans.coff <- Loans %>% filter(Amount < 40000 & AnnlIncome < 250000 & CrdtBal < 50000 & OpenCrdt < 250000 & MthsLastDlqnt > 0) Loans.coff <- Loans.coff %>% filter(Purpose %in% c("Take a Trip", "Educational Expenses", "Debt Consolidation")) write.csv2(Loans.coff, "C:/Users/srram/Desktop/Demos/RServer/loansclean.csv")
write.csv(Loans.coff, "C:/Users/srram/Desktop/Demos/RServer/loansclean.csv")
Loans <- read.csv("C:/Users/srram/Desktop/CleanedOutput.csv",header = TRUE) #         header = TRUE, #         col.names=c('LoanID', 'CustomerID', 'Status', 'Amount', 'Term', 'CrdtScore', #                       'YearsJob', 'HomeOwnshp', 'AnnlIncome', 'Purpose', #                       'MthlyDebt', 'YearsCrdtHist', 'MthsLastDlqnt', 'OpenAccts', 'CrdtProbs', #                       'CrdtBal', 'OpenCrdt', 'Bankrptcies', 'TaxLiens'), #         stringsAsFactors = FALSE) #library(tidyr) #remoteLogin("http://srramrserver.southcentralus.cloudapp.azure.com:12800", session = TRUE, commandline = TRUE, prompt = "Remote->>") library(dplyr) library(RevoScaleR) library(ggplot2) #summary(Loans) convert.factor <- function(x) {     if (is.character(Loans[, x])) {         # print("trying to convert ... 2..")         as.factor(Loans[, x])     } } name.list <- function(x) {     names <- names(x)     len <- length(names)     names[-len] } lapply(c("Purpose", "HomeOwnshp", "YearsJob"), as.factor) names(Loans) #n <- name.list(Loans) attach(Loans) ##Start Cleaning up and Transforming the data #Loans <- filter(Loans, !is.na(AnnlIncome)) Loans <- filter(Loans, !is.na(CrdtScore)) Loans <- filter(Loans, Bankrptcies != "NA") Loans <- filter(Loans, TaxLiens != "NA") Loans$MthlyDebt <- as.double(sub(",", "", substring(Loans$MthlyDebt, 2,))) Loans$OpenCrdt <- as.integer(Loans$OpenCrdt) Loans <- filter(Loans, OpenCrdt > 0) Loans <- filter(Loans, AnnlIncome > 0) Loans$CrdtScore <- as.integer(substring(Loans$CrdtScore, 1, 3)) Loans <- mutate(Loans, MthsLastDlqntnew = ifelse(is.na(MthsLastDlqnt) & CrdtProbs == 0, 0, MthsLastDlqnt)) Loans <- mutate(Loans, CrdtProbsnew = ifelse(CrdtProbs >= 1, 1, 0)) Loans <- Loans %>% mutate(Purpose.new = ifelse(Purpose != "Debt Consolidation", ifelse(Purpose == "Business Loan", "Business Loan", "NDC Personal"), "Debt Consolidation")) Loans <- mutate(Loans, risk =                 ifelse((CrdtProbs >= 1 | MthsLastDlqntnew > 2) & Purpose.new == "Non Debt Consolidation", 2,                        ifelse(Purpose.new == "Debt Consolidation" & MthsLastDlqntnew > 24, 2, CrdtProbsnew))) #summary(Loans) Loans <- Loans %>% filter(Amount < 40000 & (AnnlIncome < 1500000 | is.na(AnnlIncome)) & CrdtBal < 50000 & OpenCrdt < 250000 & MthsLastDlqnt != -1)
write.csv(Loans, "C:/Users/srram/Desktop/Demos/RServer/loansclean.csv")
Loans <- read.csv("C:/Users/srram/Desktop/CleanedOutput.csv",header = TRUE) #         header = TRUE, #         col.names=c('LoanID', 'CustomerID', 'Status', 'Amount', 'Term', 'CrdtScore', #                       'YearsJob', 'HomeOwnshp', 'AnnlIncome', 'Purpose', #                       'MthlyDebt', 'YearsCrdtHist', 'MthsLastDlqnt', 'OpenAccts', 'CrdtProbs', #                       'CrdtBal', 'OpenCrdt', 'Bankrptcies', 'TaxLiens'), #         stringsAsFactors = FALSE) #library(tidyr) #remoteLogin("http://srramrserver.southcentralus.cloudapp.azure.com:12800", session = TRUE, commandline = TRUE, prompt = "Remote->>") library(dplyr) library(RevoScaleR) library(ggplot2) #summary(Loans) convert.factor <- function(x) {     if (is.character(Loans[, x])) {         # print("trying to convert ... 2..")         as.factor(Loans[, x])     } } name.list <- function(x) {     names <- names(x)     len <- length(names)     names[-len] } lapply(c("Purpose", "HomeOwnshp", "YearsJob"), as.factor) names(Loans) #n <- name.list(Loans) attach(Loans) ##Start Cleaning up and Transforming the data #Loans <- filter(Loans, !is.na(AnnlIncome)) Loans <- filter(Loans, !is.na(CrdtScore)) Loans <- filter(Loans, Bankrptcies != "NA") Loans <- filter(Loans, TaxLiens != "NA") Loans$MthlyDebt <- as.double(sub(",", "", substring(Loans$MthlyDebt, 2,))) Loans$OpenCrdt <- as.integer(Loans$OpenCrdt) Loans <- filter(Loans, OpenCrdt > 0) Loans <- filter(Loans, AnnlIncome > 0) Loans$CrdtScore <- as.integer(substring(Loans$CrdtScore, 1, 3)) Loans <- mutate(Loans, MthsLastDlqntnew = ifelse(is.na(MthsLastDlqnt) & CrdtProbs == 0, 0, MthsLastDlqnt)) Loans <- mutate(Loans, CrdtProbsnew = ifelse(CrdtProbs >= 1, 1, 0)) Loans <- Loans %>% mutate(Purpose.new = ifelse(Purpose != "Debt Consolidation", ifelse(Purpose == "Business Loan", "Business Loan", "NDC Personal"), "Debt Consolidation")) Loans <- mutate(Loans, risk =                 ifelse((CrdtProbs >= 1 | MthsLastDlqntnew > 2) & Purpose.new == "Non Debt Consolidation", 2,                        ifelse(Purpose.new == "Debt Consolidation" & MthsLastDlqntnew > 24, 2, CrdtProbsnew))) #summary(Loans) Loans <- Loans %>% filter( (AnnlIncome < 1500000 | is.na(AnnlIncome)) & CrdtBal < 50000 & OpenCrdt < 250000 & MthsLastDlqnt != -1)
write.csv(Loans, "C:/Users/srram/Desktop/Demos/RServer/loansclean.csv")
###Read the file### # Loans <- read.csv("C:/Users/srram/Desktop/CleanedOutput.csv",header = TRUE) #         header = TRUE, #         col.names=c('LoanID', 'CustomerID', 'Status', 'Amount', 'Term', 'CrdtScore', #                       'YearsJob', 'HomeOwnshp', 'AnnlIncome', 'Purpose', #                       'MthlyDebt', 'YearsCrdtHist', 'MthsLastDlqnt', 'OpenAccts', 'CrdtProbs', #                       'CrdtBal', 'OpenCrdt', 'Bankrptcies', 'TaxLiens'), #         stringsAsFactors = FALSE) #library(tidyr) #remoteLogin("http://srramrserver.southcentralus.cloudapp.azure.com:12800", session = TRUE, commandline = TRUE, prompt = "Remote->>") library(dplyr) library(RevoScaleR) library(ggplot2) #summary(Loans) convert.factor <- function(x) {     if (is.character(Loans[, x])) {         # print("trying to convert ... 2..")         as.factor(Loans[, x])     } } name.list <- function(x) {     names <- names(x)     len <- length(names)     names[-len] } lapply(c("Purpose", "HomeOwnshp", "YearsJob"), as.factor) names(Loans) #n <- name.list(Loans) attach(Loans) ##Start Cleaning up and Transforming the data #Loans <- filter(Loans, !is.na(AnnlIncome)) Loans <- filter(Loans, !is.na(CrdtScore)) Loans <- filter(Loans, Bankrptcies != "NA") Loans <- filter(Loans, TaxLiens != "NA") Loans$MthlyDebt <- as.double(sub(",", "", substring(Loans$MthlyDebt, 2,))) Loans$OpenCrdt <- as.integer(Loans$OpenCrdt) Loans <- filter(Loans, OpenCrdt > 0) Loans <- filter(Loans, AnnlIncome > 0) Loans$CrdtScore <- as.integer(substring(Loans$CrdtScore, 1, 3)) Loans <- mutate(Loans, MthsLastDlqntnew = ifelse(is.na(MthsLastDlqnt) & CrdtProbs == 0, 0, MthsLastDlqnt)) Loans <- mutate(Loans, CrdtProbsnew = ifelse(CrdtProbs >= 1, 1, 0)) Loans <- Loans %>% mutate(Purpose.new = ifelse(Purpose != "Debt Consolidation", ifelse(Purpose == "Business Loan", "Business Loan", "NDC Personal"), "Debt Consolidation")) Loans <- mutate(Loans, risk =                 ifelse((CrdtProbs >= 1 | MthsLastDlqntnew > 2) & Purpose.new == "Non Debt Consolidation", 2,                        ifelse(Purpose.new == "Debt Consolidation" & MthsLastDlqntnew > 24, 2, CrdtProbsnew))) #summary(Loans) Loans <- Loans %>% filter( (AnnlIncome < 2500000 | is.na(AnnlIncome)) & CrdtBal < 50000 & OpenCrdt < 2500000 )
write.csv(Loans, "C:/Users/srram/Desktop/Demos/RServer/loansclean.csv")
tempdir()
getwd()
file.path(getwd(),applyfilters.xdf)
file.path(getwd(),"applyfilters.xdf")
ln(100)
log(100)
inputFile <- file.path(getwd(), "loansclean.csv") outputFile <- file.path(getwd(), "normalized.csv") normalize <- function(x) {     log(x) }
library(RevoScaleR)
rxDataStep(inData = inputFile, outFile = outputFile,             transforms = list(AnnlIncome = myTransform(AnnlIncome), MthlyDebt = myTransform(MthlyDebt)), transformObjects = list(myTransform = normalize),             overwrite = TRUE)
library(RevoScaleR) inputFile <- file.path(getwd(), "loansclean.csv") outputFile <- file.path(getwd(), "transformed.csv") normalize <- function(x) {     log(x) } transformamount <- function(amount, monthlydebt, term) {     if (amount = 99999999 & term = "Short Term") {         monthlydebt * 18     }     else {         if (amount = 99999999 & term = "Long Term") {             monthlydebt * 180         } else {             amount         }     } } rxDataStep(inData = inputFile, outFile = outputFile,             transforms = list(AnnlIncome = myTransform(AnnlIncome), MthlyDebt = myTransform(MthlyDebt), Amount = myTransform1(Amount, MthlyDebt, Term)), transformObjects = list(myTransform = normalize, myTransform1 = transformamount),             overwrite = TRUE)
transformamount <- function(amount, monthlydebt, term) {     if (amount = 99999999 & term = "Short Term") {         monthlydebt * 18     }     else {         if (amount = 99999999 & term = "Long Term") {             monthlydebt * 180         } else {             amount         }     } }
transformamount <- function(amount, monthlydebt, term) {     if (amount == 99999999 & term == 'Short Term') {         log(monthlydebt * 18)     }     else {         if (amount == 99999999 & term == 'Long Term') {             log(monthlydebt * 180)         } else {             log(amount)         }     } }
rxDataStep(inData = inputFile, outFile = outputFile,             transforms = list(AnnlIncome = myTransform(AnnlIncome), MthlyDebt = myTransform(MthlyDebt), Amount = myTransform1(Amount, MthlyDebt, Term)), transformObjects = list(myTransform = normalize, myTransform1 = transformamount),             overwrite = TRUE)
rxDataStep(inData = inputFile, outFile = outputFile,             transforms = list(AnnlIncome = myTransform(AnnlIncome), MthlyDebt = myTransform(MthlyDebt), Amount = myTransform1(Amount, MthlyDebt, Term)), transformObjects = list(myTransform = normalize, myTransform1 = transformamount),             ,removeMissings = TRUE,overwrite = TRUE)
rxDataStep(inData = inputFile, outFile = outputFile,             transforms = list(AnnlIncome = myTransform(AnnlIncome), MthlyDebt = myTransform(MthlyDebt), Amount = myTransform1(Amount, MthlyDebt, Term)), transformObjects = list(myTransform = normalize, myTransform1 = transformamount),             rowSelection = (!is.na(monthlydebt) & !is.na(Amount) &!is.na(AnnlIncome)), removeMissings = TRUE, overwrite = TRUE)
rxDataStep(inData = inputFile, outFile = outputFile,             transforms = list(AnnlIncome = myTransform(AnnlIncome), MthlyDebt = myTransform(MthlyDebt), Amount = myTransform1(Amount, MthlyDebt, Term)), transformObjects = list(myTransform = normalize, myTransform1 = transformamount),             rowSelection = (!is.na(monthlydebt) ), removeMissings = TRUE, overwrite = TRUE)
rxDataStep(inData = inputFile, outFile = outputFile,             transforms = list(AnnlIncome = myTransform(AnnlIncome), MthlyDebt = myTransform(MthlyDebt), Amount = myTransform1(Amount, MthlyDebt, Term)), transformObjects = list(myTransform = normalize, myTransform1 = transformamount),             removeMissings = TRUE, overwrite = TRUE)
log(0.1)
log(0)
>  rxDataStep(inData = inputFile, outFile = outputFile,             transforms = list(AnnlIncome = myTransform(AnnlIncome), MthlyDebt = myTransform(MthlyDebt), Amount = myTransform1(Amount, MthlyDebt, Term)), transformObjects = list(myTransform = normalize, myTransform1 = transformamount),             removeMissings = TRUE, overwrite = TRUE)
library(RevoScaleR) inputFile <- file.path(getwd(), "loansclean.csv") outputFile <- file.path(getwd(), "transformed.csv") normalize <- function(x) {     log(x) } transformamount <- function(amount, monthlydebt, term) {     if (amount == 99999999 & term == 'Short Term') {         log(monthlydebt * 18)     }     else {         if (amount == 99999999 & term == 'Long Term') {             log(monthlydebt * 180)         } else {             log(amount)         }     } } rxDataStep(inData = inputFile, outFile = outputFile,             transforms = list(crdtusage = (CrdtBal / OpenCrdt),             Term = as.factor(Term), YearsJob = as.factor(YearsJob),             HomeOwnshp = as.factor(HomeOwnshp), Purpose = as.factor(Purpose),             AnnlIncome = myTransform(AnnlIncome), MthlyDebt = myTransform(MthlyDebt),             Amount = myTransform1(Amount, MthlyDebt, Term),             CrdtScore = myTransform(crdtScore)), transformObjects = list(myTransform = normalize, myTransform1 = transformamount),             removeMissings = TRUE, overwrite = TRUE)
rxDataStep(inData = inputFile, outFile = outputFile,             transforms = list(crdtusage = (CrdtBal / OpenCrdt),Term = as.factor(Term), YearsJob = as.factor(YearsJob),HomeOwnshp = as.factor(HomeOwnshp), Purpose = as.factor(Purpose),AnnlIncome = myTransform(AnnlIncome), MthlyDebt = myTransform(MthlyDebt),Amount = myTransform1(Amount, MthlyDebt, Term),CrdtScore = myTransform(crdtScore)), transformObjects = list(myTransform = normalize, myTransform1 = transformamount),             removeMissings = TRUE, overwrite = TRUE)
rxDataStep(inData = inputFile, outFile = outputFile,             transforms = list(crdtusage = (CrdtBal / OpenCrdt),AnnlIncome = myTransform(AnnlIncome), MthlyDebt = myTransform(MthlyDebt),Amount = myTransform1(Amount, MthlyDebt, Term),CrdtScore = myTransform(crdtScore)), transformObjects = list(myTransform = normalize, myTransform1 = transformamount),             removeMissings = TRUE, overwrite = TRUE)
rxDataStep(inData = inputFile, outFile = outputFile,             transforms = list(AnnlIncome = myTransform(AnnlIncome), MthlyDebt = myTransform(MthlyDebt),Amount = myTransform1(Amount, MthlyDebt, Term),CrdtScore = myTransform(crdtScore)), transformObjects = list(myTransform = normalize, myTransform1 = transformamount),             removeMissings = TRUE, overwrite = TRUE)
library(RevoScaleR) inputFile <- file.path(getwd(), "loansclean.csv") outputFile <- file.path(getwd(), "transformed.csv") normalize <- function(x) {     log(x) } transformamount <- function(amount, monthlydebt, term) {     if (amount == 99999999 & term == 'Short Term') {         log(monthlydebt * 18)     }     else {         if (amount == 99999999 & term == 'Long Term') {             log(monthlydebt * 180)         } else {             log(amount)         }     } } rxDataStep(inData = inputFile, outFile = outputFile,             transforms = list(AnnlIncome = myTransform(AnnlIncome), MthlyDebt = myTransform(MthlyDebt),Amount = myTransform1(Amount, MthlyDebt, Term),CrdtScore = myTransform(crdtScore)), transformObjects = list(myTransform = normalize, myTransform1 = transformamount),             removeMissings = TRUE, overwrite = TRUE)
rxDataStep(inData = inputFile, outFile = outputFile,             transforms = list(AnnlIncome = myTransform(AnnlIncome), MthlyDebt = myTransform(MthlyDebt),Amount = myTransform1(Amount, MthlyDebt, Term),CrdtScore = myTransform(crdtScore)), transformObjects = list(myTransform = normalize, myTransform1 = transformamount),             overwrite = TRUE)
library(RevoScaleR) inputFile <- file.path(getwd(), "loansclean.csv") outputFile <- file.path(getwd(), "transformed.csv") normalize <- function(x) {     log(x) } transformamount <- function(amount, monthlydebt, term) {     if (amount == 99999999 & term == 'Short Term') {         log(monthlydebt * 18)     }     else {         if (amount == 99999999 & term == 'Long Term') {             log(monthlydebt * 180)         } else {             log(amount)         }     } } rxDataStep(inData = inputFile, outFile = outputFile,             transforms = list(AnnlIncome = myTransform(AnnlIncome), MthlyDebt = myTransform(MthlyDebt),Amount = myTransform1(Amount, MthlyDebt, Term),CrdtScore = myTransform(crdtScore)), transformObjects = list(myTransform = normalize, myTransform1 = transformamount),             overwrite = TRUE)
rxDataStep(inData = inputFile, outFile = outputFile,             transforms = list(AnnlIncome = myTransform(AnnlIncome), MthlyDebt = myTransform(MthlyDebt),Amount = myTransform1(Amount, MthlyDebt, Term)), transformObjects = list(myTransform = normalize, myTransform1 = transformamount),             overwrite = TRUE)
rxDataStep(inData = inputFile, outFile = outputFile,             transforms = list(CrdtScore = myTransform(CrdtScore), crdtusage = (CrdtBal / OpenCrdt),             AnnlIncome = myTransform(AnnlIncome), MthlyDebt = myTransform(MthlyDebt), Amount = myTransform1(Amount, MthlyDebt, Term)), transformObjects = list(myTransform = normalize, myTransform1 = transformamount),             removeMissings = TRUE, overwrite = TRUE)
rxDataStep(inData = inputFile, outFile = outputFile,             transforms = list(CrdtScore = myTransform(CrdtScore), crdtusage = (CrdtBal / OpenCrdt),             Term = as.factor(Term), YearsJob = as.factor(YearsJob), HomeOwnshp = as.factor(HomeOwnshp), Purpose = as.factor(Purpose),             AnnlIncome = myTransform(AnnlIncome), MthlyDebt = myTransform(MthlyDebt), Amount = myTransform1(Amount, MthlyDebt, Term)), transformObjects = list(myTransform = normalize, myTransform1 = transformamount),             removeMissings = TRUE, overwrite = TRUE)
rxDataStep(inData = inputFile, outFile = outputFile,             transforms = list(CrdtScore = myTransform(CrdtScore), crdtusage = (CrdtBal / OpenCrdt),             DFactor = cut(MthsLastDlqntnew, breaks = c(-2, 0, 5, 15, 30,60,150), labels = c("Unknown", "VeryLow", "Low","Medium","High","Extremely High")),             Term = as.factor(Term), YearsJob = as.factor(YearsJob), HomeOwnshp = as.factor(HomeOwnshp), Purpose = as.factor(Purpose),             AnnlIncome = myTransform(AnnlIncome), MthlyDebt = myTransform(MthlyDebt), Amount = myTransform1(Amount, MthlyDebt, Term)), transformObjects = list(myTransform = normalize, myTransform1 = transformamount),             removeMissings = TRUE, overwrite = TRUE)
library(RevoScaleR) inputFile <- file.path(getwd(), "loansclean.csv") outputFile <- file.path(getwd(), "transformed.csv") normalize <- function(x) {     log(x) } transformamount <- function(amount, monthlydebt, term) {     if (amount == 99999999 & term == 'Short Term') {         log(monthlydebt * 18)     }     else {         if (amount == 99999999 & term == 'Long Term') {             log(monthlydebt * 180)         } else {             log(amount)         }     } } rxDataStep(inData = inputFile, outFile = outputFile,             transforms = list(CrdtScore = myTransform(CrdtScore), crdtusage = (CrdtBal / OpenCrdt),             DFactor = cut(MthsLastDlqntnew, breaks = c(-2, 0, 5, 15, 30,60,150), labels = c("Unknown", "VeryLow", "Low","Medium","High","Very High")),             Term = as.factor(Term), YearsJob = as.factor(YearsJob), HomeOwnshp = as.factor(HomeOwnshp), Purpose = as.factor(Purpose),             AnnlIncome = myTransform(AnnlIncome), MthlyDebt = myTransform(MthlyDebt), Amount = myTransform1(Amount, MthlyDebt, Term)), transformObjects = list(myTransform = normalize, myTransform1 = transformamount),             removeMissings = TRUE, overwrite = TRUE)
rxDataStep(inData = inputFile, outFile = outputFile,             transforms = list(CrdtScore = myTransform(CrdtScore), crdtusage = (CrdtBal / OpenCrdt),             DFactor = cut(MthsLastDlqntnew, breaks = c(-2, 0, 5, 15, 30,60,150), labels = c("Unknown", "VeryLow", "Low","Medium","High","Very High")),             Term = as.factor(Term), YearsJob = as.factor(YearsJob), HomeOwnshp = as.factor(HomeOwnshp), Purpose = as.factor(Purpose),             AnnlIncome = myTransform(AnnlIncome), MthlyDebt = myTransform(MthlyDebt), Amount = myTransform1(Amount, MthlyDebt, Term)), transformObjects = list(myTransform = normalize, myTransform1 = transformamount),             removeMissings = TRUE, overwrite = TRUE, varsToKeep = modelparameters)
modelparameters <- c("Status", "Amount", "Term", "CrdtScore", "YearsJob",      "HomeOwnshp", "AnnlIncome", "Purpose","MthlyDebt", "YearsCrdtHist", "crdtusage","DFactor","Bankrptcies","TaxLiens") rxDataStep(inData = inputFile, outFile = outputFile,             transforms = list(CrdtScore = myTransform(CrdtScore), crdtusage = (CrdtBal / OpenCrdt),             DFactor = cut(MthsLastDlqntnew, breaks = c(-2, 0, 5, 15, 30,60,150), labels = c("Unknown", "VeryLow", "Low","Medium","High","Very High")),             Term = as.factor(Term), YearsJob = as.factor(YearsJob), HomeOwnshp = as.factor(HomeOwnshp), Purpose = as.factor(Purpose),             AnnlIncome = myTransform(AnnlIncome), MthlyDebt = myTransform(MthlyDebt), Amount = myTransform1(Amount, MthlyDebt, Term)), transformObjects = list(myTransform = normalize, myTransform1 = transformamount),             removeMissings = TRUE, overwrite = TRUE, varsToKeep = modelparameters)
modelparameters <- c("Status", "Amount", "Term", "CrdtScore", "YearsJob",      "HomeOwnshp", "AnnlIncome", "Purpose","MthlyDebt", "YearsCrdtHist","Bankrptcies","TaxLiens") rxDataStep(inData = inputFile, outFile = outputFile,             transforms = list(CrdtScore = myTransform(CrdtScore), crdtusage = (CrdtBal / OpenCrdt),             DFactor = cut(MthsLastDlqntnew, breaks = c(-2, 0, 5, 15, 30,60,150), labels = c("Unknown", "VeryLow", "Low","Medium","High","Very High")),             Term = as.factor(Term), YearsJob = as.factor(YearsJob), HomeOwnshp = as.factor(HomeOwnshp), Purpose = as.factor(Purpose),             AnnlIncome = myTransform(AnnlIncome), MthlyDebt = myTransform(MthlyDebt), Amount = myTransform1(Amount, MthlyDebt, Term)), transformObjects = list(myTransform = normalize, myTransform1 = transformamount),             removeMissings = TRUE, overwrite = TRUE, varsToKeep = modelparameters)
dropfeautures <- c("LoanID","CustomerID","CrdtProbs","CrdtBal","OpenCrdt","MthsLastDlqntnew","CrdtProbsnew","Purpose.new","risk") rxDataStep(inData = inputFile, outFile = outputFile,             transforms = list(CrdtScore = myTransform(CrdtScore), crdtusage = (CrdtBal / OpenCrdt),             DFactor = cut(MthsLastDlqntnew, breaks = c(-2, 0, 5, 15, 30,60,150), labels = c("Unknown", "VeryLow", "Low","Medium","High","Very High")),             Term = as.factor(Term), YearsJob = as.factor(YearsJob), HomeOwnshp = as.factor(HomeOwnshp), Purpose = as.factor(Purpose),             AnnlIncome = myTransform(AnnlIncome), MthlyDebt = myTransform(MthlyDebt), Amount = myTransform1(Amount, MthlyDebt, Term)), transformObjects = list(myTransform = normalize, myTransform1 = transformamount),             removeMissings = TRUE, overwrite = TRUE, varsToDrop = dropfeautures)
dropfeautures <- c("LoanID","CustomerID","CrdtProbs","CrdtProbsnew","Purpose.new","risk") rxDataStep(inData = inputFile, outFile = outputFile,             transforms = list(CrdtScore = myTransform(CrdtScore), crdtusage = (CrdtBal / OpenCrdt),             DFactor = cut(MthsLastDlqntnew, breaks = c(-2, 0, 5, 15, 30,60,150), labels = c("Unknown", "VeryLow", "Low","Medium","High","Very High")),             Term = as.factor(Term), YearsJob = as.factor(YearsJob), HomeOwnshp = as.factor(HomeOwnshp), Purpose = as.factor(Purpose),             AnnlIncome = myTransform(AnnlIncome), MthlyDebt = myTransform(MthlyDebt), Amount = myTransform1(Amount, MthlyDebt, Term)), transformObjects = list(myTransform = normalize, myTransform1 = transformamount),             removeMissings = TRUE, overwrite = TRUE, varsToDrop = dropfeautures)
library(RevoScaleR) inputFile <- file.path(getwd(), "loansclean.csv") outputFilexdf <- file.path(getwd(), "loansclean.xdf") transformedxdf <- file.path(getwd(), "transform.xdf") rxImport(inputFile, outputFile) normalize <- function(x) {     log(x) } transformamount <- function(amount, monthlydebt, term) {     if (amount == 99999999 & term == 'Short Term') {         log(monthlydebt * 18)     }     else {         if (amount == 99999999 & term == 'Long Term') {             log(monthlydebt * 180)         } else {             log(amount)         }     } } #modelparameters <- c("Status", "Amount", "Term", "CrdtScore", "YearsJob",  #    "HomeOwnshp", "AnnlIncome", "Purpose","MthlyDebt", "YearsCrdtHist","Bankrptcies","TaxLiens") dropfeautures <- c("LoanID","CustomerID","CrdtProbs","CrdtProbsnew","Purpose.new","risk") rxDataStep(inData = outputFilexdf, outFile = transformedxdf,             transforms = list(CrdtScore = myTransform(CrdtScore), crdtusage = (CrdtBal / OpenCrdt),             DFactor = cut(MthsLastDlqntnew, breaks = c(-2, 0, 5, 15, 30,60,150), labels = c("Unknown", "VeryLow", "Low","Medium","High","Very High")),             Term = as.factor(Term), YearsJob = as.factor(YearsJob), HomeOwnshp = as.factor(HomeOwnshp), Purpose = as.factor(Purpose),             AnnlIncome = myTransform(AnnlIncome), MthlyDebt = myTransform(MthlyDebt), Amount = myTransform1(Amount, MthlyDebt, Term)), transformObjects = list(myTransform = normalize, myTransform1 = transformamount),             removeMissings = TRUE, overwrite = TRUE, varsToDrop = dropfeautures)
library(RevoScaleR) inputFile <- file.path(getwd(), "loansclean.csv") outputFilexdf <- file.path(getwd(), "loansclean.xdf") transformedxdf <- file.path(getwd(), "transform.xdf") rxImport(inputFile, outputFilexdf) normalize <- function(x) {     log(x) } transformamount <- function(amount, monthlydebt, term) {     if (amount == 99999999 & term == 'Short Term') {         log(monthlydebt * 18)     }     else {         if (amount == 99999999 & term == 'Long Term') {             log(monthlydebt * 180)         } else {             log(amount)         }     } } #modelparameters <- c("Status", "Amount", "Term", "CrdtScore", "YearsJob",  #    "HomeOwnshp", "AnnlIncome", "Purpose","MthlyDebt", "YearsCrdtHist","Bankrptcies","TaxLiens") dropfeautures <- c("LoanID","CustomerID","CrdtProbs","CrdtProbsnew","Purpose.new","risk") rxDataStep(inData = outputFilexdf, outFile = transformedxdf,             transforms = list(CrdtScore = myTransform(CrdtScore), crdtusage = (CrdtBal / OpenCrdt),             DFactor = cut(MthsLastDlqntnew, breaks = c(-2, 0, 5, 15, 30,60,150), labels = c("Unknown", "VeryLow", "Low","Medium","High","Very High")),             Term = as.factor(Term), YearsJob = as.factor(YearsJob), HomeOwnshp = as.factor(HomeOwnshp), Purpose = as.factor(Purpose),             AnnlIncome = myTransform(AnnlIncome), MthlyDebt = myTransform(MthlyDebt), Amount = myTransform1(Amount, MthlyDebt, Term)), transformObjects = list(myTransform = normalize, myTransform1 = transformamount),             removeMissings = TRUE, overwrite = TRUE, varsToDrop = dropfeautures)
rxGetVarInfo(outFile)
rxGetVarInfo(transformedxdf)
rxSplit(inData = transformedxdf,     outFilesBase = "loans",     outFileSuffixes = c("Test", "Train"),     splitByFactor = "testSplitVar",     varsToKeep = modelparameters,     overwrite = TRUE,     transforms = list(testSplitVar = factor(sample(c("Test", "Train"),         size = .rxNumRows, replace = TRUE, prob = c(.10, .9)),         levels = c("Test", "Train"))), rngSeed = 17, consoleOutput = TRUE)
allVars <- names(loans.testSplitVar.Train.xdf)
allVars <- names("loans.testSplitVar.Train.xdf")
allVars <- names(file.path(getwd(), "loans.testSplitVar.Train.xdf"))
names(file.path(getwd(), "loans.testSplitVar.Train.xdf"))
rxGetVarInfo(file.path(getwd(), "loans.testSplitVar.Train.xdf"))
rxGetVarInfo(transformedxdf)
model <- formula("Label ~ Amount + Term + CrdtScore + YearsJob + HomeOwnshp + AnnlIncome + Purpose + MthlyDebt + YearsCrdtHist") rxLogisticRegressionFit <- rxLogisticRegression(model, data = "loans.testSplitVar.Train.xdf")
library(RevoScaleR) inputFile <- file.path(getwd(), "loansclean.csv") outputFilexdf <- file.path(getwd(), "loansclean.xdf") transformedxdf <- file.path(getwd(), "transform.xdf") rxImport(inputFile, outputFilexdf) normalize <- function(x) {     log(x) } transformamount <- function(amount, monthlydebt, term) {     if (amount == 99999999 & term == 'Short Term') {         log(monthlydebt * 18)     }     else {         if (amount == 99999999 & term == 'Long Term') {             log(monthlydebt * 180)         } else {             log(amount)         }     } } modelparameters <- c("Status", "Amount", "Term", "CrdtScore", "YearsJob", "HomeOwnshp","AnnlIncome", "Purpose","MthlyDebt", "YearsCrdtHist","Bankrptcies","TaxLiens","Dfactor","crdtusage") dropfeautures <- c("LoanID","CustomerID","CrdtProbs","CrdtProbsnew","Purpose.new","risk") rxDataStep(inData = outputFilexdf, outFile = transformedxdf,             transforms = list(Status = as.factor(Status), CrdtScore = myTransform(CrdtScore), crdtusage = (CrdtBal / OpenCrdt),             DFactor = cut(MthsLastDlqntnew, breaks = c(-2, 0, 5, 15, 30,60,150), labels = c("Unknown", "VeryLow", "Low","Medium","High","Very High")),             Term = as.factor(Term), YearsJob = as.factor(YearsJob), HomeOwnshp = as.factor(HomeOwnshp), Purpose = as.factor(Purpose),             AnnlIncome = myTransform(AnnlIncome), MthlyDebt = myTransform(MthlyDebt), Amount = myTransform1(Amount, MthlyDebt, Term)), transformObjects = list(myTransform = normalize, myTransform1 = transformamount),             removeMissings = TRUE, overwrite = TRUE, varsToDrop = dropfeautures) rxGetVarInfo(transformedxdf)
set.seed(4253, "L'Ecuyer-CMRG") # Randomly split the data 80-20 between train and test sets. dataProb <- c(Train = 0.8, Test = 0.2) dataSplit <-rxSplit(transformedxdf, splitByFactor = "splitVar",transforms = list(splitVar =sample(dataFactor,size = .rxNumRows,replace = TRUE,                                        prob = dataProb)),                                        transformObjects =list(dataProb = dataProb,dataFactor = factor(names(dataProb),levels = names(dataProb))),outFilesBase = loans)
dataSplit <-rxSplit(transformedxdf, splitByFactor = "splitVar",transforms = list(splitVar =sample(dataFactor,size = .rxNumRows,replace = TRUE,                                        prob = dataProb)),                                        transformObjects =list(dataProb = dataProb,dataFactor = factor(names(dataProb),levels = names(dataProb))),outFilesBase = "loans")
dataTrain <- dataSplit[[1]] dataTest <- dataSplit[[2]]
names(dataTrain)
model <- formula("Status ~ Amount + Term + CrdtScore + YearsJob + HomeOwnshp + AnnlIncome + Purpose + MthlyDebt + YearsCrdtHist + crdtusage + DFactor") rxLogisticRegressionFit <- rxLogisticRegression(model, data = dataTrain)
rxFastTreesFit <- rxFastTrees(model, data = dataTrain, randomSeed = 23648)
rxFastForestFit <- rxFastForest(model, data = dataTrain, randomSeed = 23648)
rxNeuralNetFit <- rxNeuralNet(model, data = dataTrain)
fitScores <-     rxPredict(rxLogisticRegressionFit, dataTest, suffix = ".rxLogisticRegression",               extraVarsToWrite = names(dataTest),               outData = tempfile(fileext = ".xdf")) fitScores <-     rxPredict(rxFastLinearFit, fitScores, suffix = ".rxFastLinear",               extraVarsToWrite = names(fitScores),               outData = tempfile(fileext = ".xdf")) fitScores <-     rxPredict(rxFastTreesFit, fitScores, suffix = ".rxFastTrees",               extraVarsToWrite = names(fitScores),               outData = tempfile(fileext = ".xdf")) fitScores <-     rxPredict(rxFastForestFit, fitScores, suffix = ".rxFastForest",               extraVarsToWrite = names(fitScores),               outData = tempfile(fileext = ".xdf")) fitScores <-     rxPredict(rxNeuralNetFit, fitScores, suffix = ".rxNeuralNet",               extraVarsToWrite = names(fitScores),               outData = tempfile(fileext = ".xdf"))
fitScores <- rxPredict(rxLogisticRegressionFit, dataTest, suffix = ".rxLogisticRegression",               extraVarsToWrite = names(dataTest),               outData = tempfile(fileext = ".xdf"))
fitScores <-     rxPredict(rxFastLinearFit, fitScores, suffix = ".rxFastLinear",               extraVarsToWrite = names(fitScores),               outData = tempfile(fileext = ".xdf"))
rxFastLinearFit <- rxFastLinear(model, data = dataTrain)
fitScores <-     rxPredict(rxFastLinearFit, fitScores, suffix = ".rxFastLinear",               extraVarsToWrite = names(fitScores),               outData = tempfile(fileext = ".xdf"))
fitScores <-     rxPredict(rxFastLinearFit, dataTest, suffix = ".rxFastLinear",               extraVarsToWrite = names(fitScores),               outData = tempfile(fileext = ".xdf"))
fitScores
rxGetVarInfo(fitScores)
fitScores <- rxPredict(rxLogisticRegressionFit, dataTest, suffix = ".rxLogisticRegression",               extraVarsToWrite = names(dataTest),               outData = tempfile(fileext = ".xdf"))
fitScores <- rxPredict(rxLogisticRegressionFit, dataTest, suffix = ".rxLogisticRegression",               extraVarsToWrite = names(dataTest),               outData = "scores.xdf")
fitScores <-     rxPredict(rxFastLinearFit, fitScores, suffix = ".rxFastLinear",               extraVarsToWrite = names(fitScores),               outData = "scores.xdf")
fitScores <- rxPredict(rxLogisticRegressionFit, dataTest, suffix = ".rxLogisticRegression",               extraVarsToWrite = names(dataTest),               outData = tempfile(fileext = ".xdf"))
fitScores <-     rxPredict(rxFastTreesFit, fitScores, suffix = ".rxFastTrees",               extraVarsToWrite = names(fitScores),               outData = tempfile(fileext = ".xdf"))
tempfile(fileext = ".xdf"))
tempfile(fileext = ".xdf")
rxPredict(rxLogisticRegressionFit, dataTest, suffix = ".rxLogisticRegression",               extraVarsToWrite = names(dataTest),               outData = tempfile(fileext = ".xdf"))
rxLogisticRegressionFit <- rxLogisticRegression(model, data = dataTrain) rxFastLinearFit <- rxFastLinear(model, data = dataTrain) rxFastTreesFit <- rxFastTrees(model, data = dataTrain, randomSeed = 23648) rxFastForestFit <- rxFastForest(model, data = dataTrain, randomSeed = 23648) rxNeuralNetFit <- rxNeuralNet(model, data = dataTrain)
names(dataTest)
fitScores <-  rxPredict(rxLogisticRegressionFit, dataTest, suffix = ".rxLogisticRegression",               extraVarsToWrite = names(dataTest),               outData = tempfile(fileext = ".xdf"))
fitScores
fitScores <- rxPredict(rxFastLinearFit, fitScores, suffix = ".rxFastLinear",                 extraVarsToWrite = names(fitScores),                 outData = tempfile(fileext = ".xdf"))
names(fitScores)
rxPredict(rxFastLinearFit, fitScores, suffix = ".rxFastLinear",                 extraVarsToWrite = c("Score.rxLogisticRegression.Fully Paid", "Probability.rxLogisticRegression.Fully Paid"),                 outData = tempfile(fileext = ".xdf"))
library(RevoScaleR) inputFile <- file.path(getwd(), "loansclean.csv") outputFilexdf <- file.path(getwd(), "loansclean.xdf") transformedxdf <- file.path(getwd(), "transform.xdf") rxImport(inputFile, outputFilexdf) normalize <- function(x) {     log(x) } transformamount <- function(amount, monthlydebt, term) {     if (amount == 99999999 & term == 'Short Term') {         log(monthlydebt * 18)     }     else {         if (amount == 99999999 & term == 'Long Term') {             log(monthlydebt * 180)         } else {             log(amount)         }     } } modelparameters <- c("Status", "Amount", "Term", "CrdtScore", "YearsJob", "HomeOwnshp","AnnlIncome", "Purpose","MthlyDebt", "YearsCrdtHist","Bankrptcies","TaxLiens","Dfactor","crdtusage") dropfeautures <- c("LoanID","CustomerID","CrdtProbs","CrdtProbsnew","Purpose.new","risk") rxDataStep(inData = outputFilexdf, outFile = transformedxdf,             transforms = list(Status = as.factor(Status), CrdtScore = myTransform(CrdtScore), crdtusage = (CrdtBal / OpenCrdt),             DFactor = cut(MthsLastDlqntnew, breaks = c(-2, 0, 5, 15, 30,60,150), labels = c("Unknown", "VeryLow", "Low","Medium","High","Very High")),             Term = as.factor(Term), YearsJob = as.factor(YearsJob), HomeOwnshp = as.factor(HomeOwnshp), Purpose = as.factor(Purpose),             AnnlIncome = myTransform(AnnlIncome), MthlyDebt = myTransform(MthlyDebt), Amount = myTransform1(Amount, MthlyDebt, Term)), transformObjects = list(myTransform = normalize, myTransform1 = transformamount),             removeMissings = TRUE, overwrite = TRUE, varsToDrop = dropfeautures) rxGetVarInfo(transformedxdf) # Set the random seed for reproducibility of randomness. set.seed(4253, "L'Ecuyer-CMRG") # Randomly split the data 80-20 between train and test sets. dataProb <- c(Train = 0.8, Test = 0.2) dataSplit <-rxSplit(transformedxdf, splitByFactor = "splitVar",transforms = list(splitVar =sample(dataFactor,size = .rxNumRows,replace = TRUE,                                        prob = dataProb)),                                        transformObjects =list(dataProb = dataProb,dataFactor = factor(names(dataProb),levels = names(dataProb))),outFilesBase = "loans") # Name the train and test datasets. dataTrain <- dataSplit[[1]] dataTest <- dataSplit[[2]] names(dataTrain) #allVars <- names(dataTrain) # The other variables are the record's properties. #xVars <- setdiff(allVars, c("UserId", "Label", "splitVar")) # The model is a formula that says that churners are to be # identified using the other variables. #model <- formula(paste("Label ~", paste(xVars, collapse = " + "))) model <- formula("Status ~ Amount + Term + CrdtScore + YearsJob + HomeOwnshp + AnnlIncome + Purpose + MthlyDebt + YearsCrdtHist + crdtusage + DFactor") rxLogisticRegressionFit <- rxLogisticRegression(model, data = dataTrain) rxFastLinearFit <- rxFastLinear(model, data = dataTrain) rxFastTreesFit <- rxFastTrees(model, data = dataTrain, randomSeed = 23648) rxFastForestFit <- rxFastForest(model, data = dataTrain, randomSeed = 23648) rxNeuralNetFit <- rxNeuralNet(model, data = dataTrain) fitScores <-  rxPredict(rxLogisticRegressionFit, dataTest, suffix = ".rxLogisticRegression",               extraVarsToWrite = names(dataTest),               outData = tempfile(fileext = ".xdf"))
library(RevoScaleR) inputFile <- file.path(getwd(), "loansclean.csv") outputFilexdf <- file.path(getwd(), "loansclean.xdf") transformedxdf <- file.path(getwd(), "transform.xdf") rxImport(inputFile, outputFilexdf) normalize <- function(x) {     log(x) } transformamount <- function(amount, monthlydebt, term) {     if (amount == 99999999 & term == 'Short Term') {         log(monthlydebt * 18)     }     else {         if (amount == 99999999 & term == 'Long Term') {             log(monthlydebt * 180)         } else {             log(amount)         }     } } modelparameters <- c("Status", "Amount", "Term", "CrdtScore", "YearsJob", "HomeOwnshp","AnnlIncome", "Purpose","MthlyDebt", "YearsCrdtHist","Bankrptcies","TaxLiens","Dfactor","crdtusage") dropfeautures <- c("LoanID","CustomerID","CrdtProbs","CrdtProbsnew","Purpose.new","risk") rxDataStep(inData = outputFilexdf, outFile = transformedxdf,             transforms = list(Status = as.factor(Status), CrdtScore = myTransform(CrdtScore), crdtusage = (CrdtBal / OpenCrdt),             DFactor = cut(MthsLastDlqntnew, breaks = c(-2, 0, 5, 15, 30,60,150), labels = c("Unknown", "VeryLow", "Low","Medium","High","Very High")),             Term = as.factor(Term), YearsJob = as.factor(YearsJob), HomeOwnshp = as.factor(HomeOwnshp), Purpose = as.factor(Purpose),             AnnlIncome = myTransform(AnnlIncome), MthlyDebt = myTransform(MthlyDebt), Amount = myTransform1(Amount, MthlyDebt, Term)), transformObjects = list(myTransform = normalize, myTransform1 = transformamount),             removeMissings = TRUE, overwrite = TRUE, varsToDrop = dropfeautures) rxGetVarInfo(transformedxdf) # Set the random seed for reproducibility of randomness. set.seed(4253, "L'Ecuyer-CMRG") # Randomly split the data 80-20 between train and test sets. dataProb <- c(Train = 0.8, Test = 0.2) dataSplit <-rxSplit(transformedxdf, splitByFactor = "splitVar",transforms = list(splitVar =sample(dataFactor,size = .rxNumRows,replace = TRUE,                                        prob = dataProb)),                                        transformObjects =list(dataProb = dataProb,dataFactor = factor(names(dataProb),levels = names(dataProb))),outFilesBase = "loans") # Name the train and test datasets. dataTrain <- dataSplit[[1]] dataTest <- dataSplit[[2]] names(dataTrain) #allVars <- names(dataTrain) # The other variables are the record's properties. #xVars <- setdiff(allVars, c("UserId", "Label", "splitVar")) # The model is a formula that says that churners are to be # identified using the other variables. #model <- formula(paste("Label ~", paste(xVars, collapse = " + "))) model <- formula("Status ~ Amount + Term + CrdtScore + YearsJob + HomeOwnshp + AnnlIncome + Purpose + MthlyDebt + YearsCrdtHist + crdtusage + DFactor") rxLogisticRegressionFit <- rxLogisticRegression(model, data = dataTrain) rxFastLinearFit <- rxFastLinear(model, data = dataTrain) rxFastTreesFit <- rxFastTrees(model, data = dataTrain, randomSeed = 23648) rxFastForestFit <- rxFastForest(model, data = dataTrain, randomSeed = 23648) rxNeuralNetFit <- rxNeuralNet(model, data = dataTrain) fitScores <-  rxPredict(rxLogisticRegressionFit, dataTest, suffix = ".rxLogisticRegression",               extraVarsToWrite = names(dataTest),               outData = tempfile(fileext = ".xdf"))
names(fitScores)
fitScores <- rxPredict(rxFastLinearFit, fitScores, suffix = ".rxFastLinear",                 extraVarsToWrite = names(fitScores),                 outData = tempfile(fileext = ".xdf"))
fitScores <- rxPredict(rxFastTreesFit, fitScores, suffix = ".rxFastTrees",               extraVarsToWrite = names(fitScores),               outData = tempfile(fileext = ".xdf"))
fitScores <- rxPredict(rxFastForestFit, fitScores, suffix = ".rxFastForest",               extraVarsToWrite = names(fitScores),               outData = tempfile(fileext = ".xdf"))
fitScores <- rxPredict(rxNeuralNetFit, fitScores, suffix = ".rxNeuralNet",               extraVarsToWrite = names(fitScores),               outData = tempfile(fileext = ".xdf"))
rxGetVarInfo(fitScores)
rxRoc("Label",paste("Probability",c("rxLogisticRegression", "rxFastLinear", "rxFastTrees","rxFastForest", "rxNeuralNet"),             sep = "."),fitScores)
rxGetVarInfo(fitScores)
rxRoc("Status",paste("Probability",c("rxLogisticRegression", "rxFastLinear", "rxFastTrees","rxFastForest", "rxNeuralNet"),             sep = "."),fitScores)
rxRoc(Status,paste("Probability",c("rxLogisticRegression", "rxFastLinear", "rxFastTrees","rxFastForest", "rxNeuralNet"),             sep = "."),fitScores)
rxRoc("FullyPaid",paste(" Probability ",c(" rxLogisticRegression ", " rxFastLinear ", " rxFastTrees "," rxFastForest ", " rxNeuralNet "),             sep = "."),fitScores)
fitRoc <-rxRoc("FullyPaid",paste("Probability",c("rxLogisticRegression", "rxFastLinear", "rxFastTrees","rxFastForest", "rxNeuralNet"),             sep = "."),fitScores)
fitRoc <-rxRoc("Status",paste("Probability",c("rxLogisticRegression", "rxFastLinear", "rxFastTrees","rxFastForest", "rxNeuralNet"),             sep = "."),fitScores)
rxRoc(paste("Probability",c("rxLogisticRegression", "rxFastLinear", "rxFastTrees","rxFastForest", "rxNeuralNet"),"FullyPaid",             sep = "."),fitScores)
fitRoc <-rxRoc(paste("Probability",c("rxLogisticRegression.FullyPaid", "rxFastLinear.FullyPaid", "rxFastTrees.FullyPaid","rxFastForest.FullyPaid", "rxNeuralNet.FullyPaid"),             sep = "."),fitScores)
paste("Probability",c("rxLogisticRegression.FullyPaid", "rxFastLinear.FullyPaid", "rxFastTrees.FullyPaid","rxFastForest.FullyPaid", "rxNeuralNet.FullyPaid"),             sep = ".")
fitRoc <-rxRoc(Status,paste("Probability",c("rxLogisticRegression.FullyPaid", "rxFastLinear.FullyPaid", "rxFastTrees.FullyPaid","rxFastForest.FullyPaid", "rxNeuralNet.FullyPaid"),             sep = "."),fitScores)
fitRoc <-rxRoc("Status",paste("Probability",c("rxLogisticRegression.FullyPaid", "rxFastLinear.FullyPaid", "rxFastTrees.FullyPaid","rxFastForest.FullyPaid", "rxNeuralNet.FullyPaid"),             sep = "."),fitScores)
fitRoc
warnings()
fitRoc <-rxRoc("Status",paste("PredictedLabel",c("rxLogisticRegression", "rxFastLinear", "rxFastTrees","rxFastForest", "rxNeuralNet"),             sep = "."),fitScores)
warnings()
rxGetVarInfo(fitScores)
paste("PredictedLabel",c("rxLogisticRegression", "rxFastLinear", "rxFastTrees","rxFastForest", "rxNeuralNet"),             sep = ".")
fitRoc <-rxRoc("Status",paste("PredictedLabel",c("rxLogisticRegression", "rxFastLinear", "rxFastTrees","rxFastForest", "rxNeuralNet"),             sep = "."), fitScores)
plot(fitRoc)
paste("PredictedLabel", c("rxLogisticRegression", "rxFastLinear", "rxFastTrees", "rxFastForest", "rxNeuralNet"), sep = ".")
rxRoc("Status", paste("PredictedLabel", c("rxLogisticRegression", "rxFastLinear", "rxFastTrees", "rxFastForest", "rxNeuralNet"), sep = "."), fitScores)
library(RevoScaleR) inputFile <- file.path(getwd(), "loansclean.csv") outputFilexdf <- file.path(getwd(), "loansclean.xdf") transformedxdf <- file.path(getwd(), "transform.xdf") rxImport(inputFile, outputFilexdf) normalize <- function(x) {     log(x) } transformamount <- function(amount, monthlydebt, term) {     if (amount == 99999999 & term == 'Short Term') {         log(monthlydebt * 18)     }     else {         if (amount == 99999999 & term == 'Long Term') {             log(monthlydebt * 180)         } else {             log(amount)         }     } } modelparameters <- c("Status", "Amount", "Term", "CrdtScore", "YearsJob", "HomeOwnshp","AnnlIncome", "Purpose","MthlyDebt", "YearsCrdtHist","Bankrptcies","TaxLiens","Dfactor","crdtusage") dropfeautures <- c("LoanID","CustomerID","CrdtProbs","CrdtProbsnew","Purpose.new","risk") rxDataStep(inData = outputFilexdf, outFile = transformedxdf,             transforms = list(Status = as.factor(Status), CrdtScore = myTransform(CrdtScore), crdtusage = (CrdtBal / OpenCrdt),             DFactor = cut(MthsLastDlqntnew, breaks = c(-2, 0, 5, 15, 30,60,150), labels = c("Unknown", "VeryLow", "Low","Medium","High","Very High")),             Term = as.factor(Term), YearsJob = as.factor(YearsJob), HomeOwnshp = as.factor(HomeOwnshp), Purpose = as.factor(Purpose),             AnnlIncome = myTransform(AnnlIncome), MthlyDebt = myTransform(MthlyDebt), Amount = myTransform1(Amount, MthlyDebt, Term)), transformObjects = list(myTransform = normalize, myTransform1 = transformamount),             removeMissings = TRUE, overwrite = TRUE, varsToDrop = dropfeautures) rxGetVarInfo(transformedxdf) # Set the random seed for reproducibility of randomness. set.seed(4253, "L'Ecuyer-CMRG") # Randomly split the data 80-20 between train and test sets. dataProb <- c(Train = 0.8, Test = 0.2) dataSplit <-rxSplit(transformedxdf, splitByFactor = "splitVar",transforms = list(splitVar =sample(dataFactor,size = .rxNumRows,replace = TRUE,                                        prob = dataProb)),                                        transformObjects =list(dataProb = dataProb,dataFactor = factor(names(dataProb),levels = names(dataProb))),outFilesBase = "loans") # Name the train and test datasets. dataTrain <- dataSplit[[1]] dataTest <- dataSplit[[2]] names(dataTrain) #allVars <- names(dataTrain) # The other variables are the record's properties. #xVars <- setdiff(allVars, c("UserId", "Label", "splitVar")) # The model is a formula that says that churners are to be # identified using the other variables. #model <- formula(paste("Label ~", paste(xVars, collapse = " + "))) model <- formula("Status ~ Amount + Term + CrdtScore + YearsJob + HomeOwnshp + AnnlIncome + Purpose + MthlyDebt + YearsCrdtHist + crdtusage + DFactor") rxLogisticRegressionFit <- rxLogisticRegression(model, data = dataTrain) rxFastLinearFit <- rxFastLinear(model, data = dataTrain) rxFastTreesFit <- rxFastTrees(model, data = dataTrain, randomSeed = 23648) rxFastForestFit <- rxFastForest(model, data = dataTrain, randomSeed = 23648) rxNeuralNetFit <- rxNeuralNet(model, data = dataTrain) fitScores <-  rxPredict(rxLogisticRegressionFit, dataTest, suffix = ".rxLogisticRegression",               extraVarsToWrite = names(dataTest),               outData = tempfile(fileext = ".xdf")) fitScores <- rxPredict(rxFastLinearFit, fitScores, suffix = ".rxFastLinear",               extraVarsToWrite = names(fitScores),               outData = tempfile(fileext = ".xdf")) fitScores <- rxPredict(rxFastTreesFit, fitScores, suffix = ".rxFastTrees",               extraVarsToWrite = names(fitScores),               outData = tempfile(fileext = ".xdf")) fitScores <- rxPredict(rxFastForestFit, fitScores, suffix = ".rxFastForest",               extraVarsToWrite = names(fitScores),               outData = tempfile(fileext = ".xdf")) fitScores <- rxPredict(rxNeuralNetFit, fitScores, suffix = ".rxNeuralNet",               extraVarsToWrite = names(fitScores),               outData = tempfile(fileext = ".xdf"))
library(RevoScaleR) inputFile <- file.path(getwd(), "loansclean.csv") outputFilexdf <- file.path(getwd(), "loansclean.xdf") transformedxdf <- file.path(getwd(), "transform.xdf") rxImport(inputFile, outputFilexdf) normalize <- function(x) {     log(x) } transformamount <- function(amount, monthlydebt, term) {     if (amount == 99999999 & term == 'Short Term') {         log(monthlydebt * 18)     }     else {         if (amount == 99999999 & term == 'Long Term') {             log(monthlydebt * 180)         } else {             log(amount)         }     } } modelparameters <- c("Status", "Amount", "Term", "CrdtScore", "YearsJob", "HomeOwnshp","AnnlIncome", "Purpose","MthlyDebt", "YearsCrdtHist","Bankrptcies","TaxLiens","Dfactor","crdtusage") dropfeautures <- c("LoanID","CustomerID","CrdtProbs","CrdtProbsnew","Purpose.new","risk") rxDataStep(inData = outputFilexdf, outFile = transformedxdf,             transforms = list(Status = as.factor(Status), CrdtScore = myTransform(CrdtScore), crdtusage = (CrdtBal / OpenCrdt),             DFactor = cut(MthsLastDlqntnew, breaks = c(-2, 0, 5, 15, 30,60,150), labels = c("Unknown", "VeryLow", "Low","Medium","High","Very High")),             Term = as.factor(Term), YearsJob = as.factor(YearsJob), HomeOwnshp = as.factor(HomeOwnshp), Purpose = as.factor(Purpose),             AnnlIncome = myTransform(AnnlIncome), MthlyDebt = myTransform(MthlyDebt), Amount = myTransform1(Amount, MthlyDebt, Term)), transformObjects = list(myTransform = normalize, myTransform1 = transformamount),             removeMissings = TRUE, overwrite = TRUE, varsToDrop = dropfeautures) rxGetVarInfo(transformedxdf) # Set the random seed for reproducibility of randomness. set.seed(4253, "L'Ecuyer-CMRG") # Randomly split the data 80-20 between train and test sets. dataProb <- c(Train = 0.8, Test = 0.2) dataSplit <-rxSplit(transformedxdf, splitByFactor = "splitVar",transforms = list(splitVar =sample(dataFactor,size = .rxNumRows,replace = TRUE,                                        prob = dataProb)),                                        transformObjects =list(dataProb = dataProb,dataFactor = factor(names(dataProb),levels = names(dataProb))),outFilesBase = "loans") # Name the train and test datasets. dataTrain <- dataSplit[[1]] dataTest <- dataSplit[[2]] names(dataTrain) #allVars <- names(dataTrain) # The other variables are the record's properties. #xVars <- setdiff(allVars, c("UserId", "Label", "splitVar")) # The model is a formula that says that churners are to be # identified using the other variables. #model <- formula(paste("Label ~", paste(xVars, collapse = " + "))) model <- formula("Status ~ Amount + Term + CrdtScore + YearsJob + HomeOwnshp + AnnlIncome + Purpose + MthlyDebt + YearsCrdtHist + crdtusage + DFactor") rxLogisticRegressionFit <- rxLogisticRegression(model, data = dataTrain) rxFastLinearFit <- rxFastLinear(model, data = dataTrain) rxFastTreesFit <- rxFastTrees(model, data = dataTrain, randomSeed = 23648) rxFastForestFit <- rxFastForest(model, data = dataTrain, randomSeed = 23648) rxNeuralNetFit <- rxNeuralNet(model, data = dataTrain) fitScores <-  rxPredict(rxLogisticRegressionFit, dataTest, suffix = ".rxLogisticRegression",               extraVarsToWrite = names(dataTest),               outData = tempfile(fileext = ".xdf")) fitScores <- rxPredict(rxFastLinearFit, fitScores, suffix = ".rxFastLinear",               extraVarsToWrite = names(fitScores),               outData = tempfile(fileext = ".xdf")) fitScores <- rxPredict(rxFastTreesFit, fitScores, suffix = ".rxFastTrees",               extraVarsToWrite = names(fitScores),               outData = tempfile(fileext = ".xdf")) fitScores <- rxPredict(rxFastForestFit, fitScores, suffix = ".rxFastForest",               extraVarsToWrite = names(fitScores),               outData = tempfile(fileext = ".xdf")) fitScores <- rxPredict(rxNeuralNetFit, fitScores, suffix = ".rxNeuralNet",               extraVarsToWrite = names(fitScores),               outData = tempfile(fileext = ".xdf"))
rxRoc("Status", paste("PredictedLabel", c("rxLogisticRegression", "rxFastLinear", "rxFastTrees", "rxFastForest", "rxNeuralNet"), sep = "."), fitScores)
rxRoc("Status", "PredictedLabel.rxLogisticRegression",fitScores)
warnings()
rxGetVarInfo(fitScores)
rxDataStep(inData = fitScores, outFile = scores,             transforms = list(lrp=myTransform(PredictedLabel.rxLogisticRegression),status_n=myTransform(Status)), transformObjects = list(myTransform = tobinary),             removeMissings = TRUE, overwrite = TRUE)
scores <- file.path(getwd(), "scores.xdf") tobinary <- function(x) {     if (x == 'FullyPaid') {         0     }     else {         1     } } rxDataStep(inData = fitScores, outFile = scores,             transforms = list(lrp=myTransform(PredictedLabel.rxLogisticRegression),status_n=myTransform(Status)), transformObjects = list(myTransform = tobinary),             removeMissings = TRUE, overwrite = TRUE)
rxGetVarInfo(scores)
scores <- file.path(getwd(), "scores.xdf") tobinary <- function(x) {     if (x == "FullyPaid") {         0     }     else {         1     } }
rxDataStep(inData = fitScores, outFile = scores,             transforms = list(lrp=myTransform(PredictedLabel.rxLogisticRegression),status_n=myTransform(Status)), transformObjects = list(myTransform = tobinary),             removeMissings = TRUE, overwrite = TRUE)
rxGetVarInfo(scores)
rxDataStep(inData = fitScores, outFile = scores,             transforms = list(lrp=myTransform("PredictedLabel.rxLogisticRegression"),status_n=myTransform("Status")), transformObjects = list(myTransform = tobinary),             removeMissings = TRUE, overwrite = TRUE)
rxGetVarInfo(scores)
tobinary <- function(x) {     if (x == 'FullyPaid') {         0     }     else {         1     } }
rxDataStep(inData = fitScores, outFile = scores,             transforms = list(lrp=myTransform("PredictedLabel.rxLogisticRegression"),status_n=myTransform("Status")), transformObjects = list(myTransform = tobinary),             removeMissings = TRUE, overwrite = TRUE)
rxGetVarInfo(scores)
tobinary <- function(x) {     if (levels(x) == 'FullyPaid' ) {         0     }     else {         1     } }
rxDataStep(inData = fitScores, outFile = scores,             transforms = list(lrp=myTransform("PredictedLabel.rxLogisticRegression"),status_n=myTransform("Status")), transformObjects = list(myTransform = tobinary),             removeMissings = TRUE, overwrite = TRUE)
tobinary <- function(x) {     if (x == 'FullyPaid' ) {         0     }     else {         1     } }
rxDataStep(inData = fitScores, outFile = scores,             transforms = list(lrp=myTransform("PredictedLabel.rxLogisticRegression"),status_n=myTransform("Status")), transformObjects = list(myTransform = tobinary),             removeMissings = TRUE, overwrite = TRUE)
rxGetVarInfo(scores)
rxRoc("status_n", "lrp",scores)
tobinary <- function(x) {     if (x == 'FullyPaid' ) {         0     }     else {         1     } }
scores <- file.path(getwd(), "scores.xdf")
tobinary <- function(x) {     if (x == 'FullyPaid' ) {         0     }     else {         1     } } rxDataStep(inData = fitScores, outFile = scores,             transforms = list(lrp=myTransform(as.character("PredictedLabel.rxLogisticRegression")),status_n=myTransform(as.character("Status"))), transformObjects = list(myTransform = tobinary),             removeMissings = TRUE, overwrite = TRUE)
library(RevoScaleR) inputFile <- file.path(getwd(), "loansclean.csv") outputFilexdf <- file.path(getwd(), "loansclean.xdf") transformedxdf <- file.path(getwd(), "transform.xdf") rxImport(inputFile, outputFilexdf) normalize <- function(x) {     log(x) } transformamount <- function(amount, monthlydebt, term) {     if (amount == 99999999 & term == 'Short Term') {         log(monthlydebt * 18)     }     else {         if (amount == 99999999 & term == 'Long Term') {             log(monthlydebt * 180)         } else {             log(amount)         }     } } modelparameters <- c("Status", "Amount", "Term", "CrdtScore", "YearsJob", "HomeOwnshp","AnnlIncome", "Purpose","MthlyDebt", "YearsCrdtHist","Bankrptcies","TaxLiens","Dfactor","crdtusage") dropfeautures <- c("LoanID","CustomerID","CrdtProbs","CrdtProbsnew","Purpose.new","risk") rxDataStep(inData = outputFilexdf, outFile = transformedxdf,             transforms = list(Status = as.factor(Status), CrdtScore = myTransform(CrdtScore), crdtusage = (CrdtBal / OpenCrdt),             DFactor = cut(MthsLastDlqntnew, breaks = c(-2, 0, 5, 15, 30,60,150), labels = c("Unknown", "VeryLow", "Low","Medium","High","Very High")),             Term = as.factor(Term), YearsJob = as.factor(YearsJob), HomeOwnshp = as.factor(HomeOwnshp), Purpose = as.factor(Purpose),             AnnlIncome = myTransform(AnnlIncome), MthlyDebt = myTransform(MthlyDebt), Amount = myTransform1(Amount, MthlyDebt, Term)), transformObjects = list(myTransform = normalize, myTransform1 = transformamount),             removeMissings = TRUE, overwrite = TRUE, varsToDrop = dropfeautures) rxGetVarInfo(transformedxdf) # Set the random seed for reproducibility of randomness. set.seed(4253, "L'Ecuyer-CMRG") # Randomly split the data 80-20 between train and test sets. dataProb <- c(Train = 0.8, Test = 0.2) dataSplit <-rxSplit(transformedxdf, splitByFactor = "splitVar",transforms = list(splitVar =sample(dataFactor,size = .rxNumRows,replace = TRUE,                                        prob = dataProb)),                                        transformObjects =list(dataProb = dataProb,dataFactor = factor(names(dataProb),levels = names(dataProb))),outFilesBase = "loans") # Name the train and test datasets. dataTrain <- dataSplit[[1]] dataTest <- dataSplit[[2]] names(dataTrain) #allVars <- names(dataTrain) # The other variables are the record's properties. #xVars <- setdiff(allVars, c("UserId", "Label", "splitVar")) # The model is a formula that says that churners are to be # identified using the other variables. #model <- formula(paste("Label ~", paste(xVars, collapse = " + "))) model <- formula("Status ~ Amount + Term + CrdtScore + YearsJob + HomeOwnshp + AnnlIncome + Purpose + MthlyDebt + YearsCrdtHist + crdtusage + DFactor") rxLogisticRegressionFit <- rxLogisticRegression(model, data = dataTrain) rxFastLinearFit <- rxFastLinear(model, data = dataTrain) rxFastTreesFit <- rxFastTrees(model, data = dataTrain, randomSeed = 23648) rxFastForestFit <- rxFastForest(model, data = dataTrain, randomSeed = 23648) rxNeuralNetFit <- rxNeuralNet(model, data = dataTrain) fitScores <-  rxPredict(rxLogisticRegressionFit, dataTest, suffix = ".rxLogisticRegression",               extraVarsToWrite = names(dataTest),               outData = tempfile(fileext = ".xdf")) fitScores <- rxPredict(rxFastLinearFit, fitScores, suffix = ".rxFastLinear",               extraVarsToWrite = names(fitScores),               outData = tempfile(fileext = ".xdf")) fitScores <- rxPredict(rxFastTreesFit, fitScores, suffix = ".rxFastTrees",               extraVarsToWrite = names(fitScores),               outData = tempfile(fileext = ".xdf")) fitScores <- rxPredict(rxFastForestFit, fitScores, suffix = ".rxFastForest",               extraVarsToWrite = names(fitScores),               outData = tempfile(fileext = ".xdf")) fitScores <- rxPredict(rxNeuralNetFit, fitScores, suffix = ".rxNeuralNet",               extraVarsToWrite = names(fitScores),               outData = tempfile(fileext = ".xdf"))
scores <- file.path(getwd(), "scores.xdf") tobinary <- function(x) {     if (x == 'FullyPaid' ) {         0     }     else {         1     } } rxDataStep(inData = fitScores, outFile = scores,             transforms = list(lrp=myTransform(as.character("PredictedLabel.rxLogisticRegression")),status_n=myTransform(as.character("Status"))), transformObjects = list(myTransform = tobinary),             removeMissings = TRUE, overwrite = TRUE)
rxGetVarInfo(scores)
tobinary <- function(x) {     if (x == 'FullyPaid' ) {         1     }     else {         0     } } rxDataStep(inData = fitScores, outFile = scores,             transforms = list(lrp=myTransform(as.character("PredictedLabel.rxLogisticRegression")),status_n=myTransform(as.character("Status"))), transformObjects = list(myTransform = tobinary),             removeMissings = TRUE, overwrite = TRUE) rxGetVarInfo(scores)
tobinary <- function(x) {     if (x == "FullyPaid" ) {         1     }     else {         0     } } rxDataStep(inData = fitScores, outFile = scores,             transforms = list(lrp=myTransform(as.character("PredictedLabel.rxLogisticRegression")),status_n=myTransform(as.character("Status"))), transformObjects = list(myTransform = tobinary),             removeMissings = TRUE, overwrite = TRUE) rxGetVarInfo(scores)
scores <- file.path(getwd(), "scores.xdf") tobinary <- function(x) {     if (as.character(x) == "FullyPaid" ) {         0     }     else {         1     } } rxDataStep(inData = fitScores, outFile = scores,             transforms = list(lrp=myTransform(PredictedLabel.rxLogisticRegression),status_n=myTransform(Status)), transformObjects = list(myTransform = tobinary),             removeMissings = TRUE, overwrite = TRUE) rxGetVarInfo(scores)
tobinary <- function(x) {     if (x == 'FullyPaid' ) {         0     }     else {         1     } } rxDataStep(inData = fitScores, outFile = scores,             transforms = list(lrp=myTransform(PredictedLabel.rxLogisticRegression),status_n=myTransform(Status)), transformObjects = list(myTransform = tobinary),             removeMissings = TRUE, overwrite = TRUE) rxGetVarInfo(scores)
tobinary <- function(x) {     if (as.character(x) == 'FullyPaid' ) {         0     }     else {         1     } } rxDataStep(inData = fitScores, outFile = scores,             transforms = list(lrp=myTransform(PredictedLabel.rxLogisticRegression),status_n=myTransform(Status)), transformObjects = list(myTransform = tobinary),             removeMissings = TRUE, overwrite = TRUE) rxGetVarInfo(scores)
tobinary <- function(x) {     if (x == 'FullyPaid' ) {         1     }     else {         0     } } rxDataStep(inData = fitScores, outFile = scores,             transforms = list(lrp=myTransform(as.character(PredictedLabel.rxLogisticRegression)),status_n=myTransform(Status)), transformObjects = list(myTransform = tobinary),             removeMissings = TRUE, overwrite = TRUE) rxGetVarInfo(scores)
tobinary <- function(x) {     if (x == "FullyPaid" ) {         1     }     else {         0     } } rxDataStep(inData = fitScores, outFile = scores,             transforms = list(lrp=myTransform(as.character(PredictedLabel.rxLogisticRegression)),status_n=myTransform(Status)), transformObjects = list(myTransform = tobinary),             removeMissings = TRUE, overwrite = TRUE) rxGetVarInfo(scores)
rxDataStep(inData = fitScores, outFile = scores,             transforms = list(lrp=as.numeric(PredictedLabel.rxLogisticRegression),status_n=myTransform(Status)), transformObjects = list(myTransform = tobinary),             removeMissings = TRUE, overwrite = TRUE) rxGetVarInfo(scores)
rxDataStep(inData = fitScores, outFile = scores,             transforms = list(lrp = as.numeric(PredictedLabel.rxLogisticRegression), status_n = as.numeric(Status)), transformObjects = list(myTransform = tobinary),             removeMissings = TRUE, overwrite = TRUE)
rxGetVarInfo(scores)
fitRoc <- rxRoc("status_n", "lrp",scores)
rxRoc("status_n", "lrp",scores)
rxDataStep(inData = fitScores, outFile = scores,             transforms = list(lrp = as.numeric(PredictedLabel.rxFastLinear), status_n = as.numeric(Status)), transformObjects = list(myTransform = tobinary),             removeMissings = TRUE, overwrite = TRUE)
rxGetVarInfo(scores)
rxRoc("status_n", "lrp",scores)
rxDataStep(inData = fitScores, outFile = scores,             transforms = list(lrp = as.numeric(PredictedLabel.rxFastLinear), status_n = as.numeric(Status)), transformObjects = list(myTransform = tobinary),             removeMissings = TRUE, overwrite = TRUE)
scores <- file.path(getwd(), "scores.csv")
rxDataStep(inData = fitScores, outFile = scores,             transforms = list(lrp = as.numeric(PredictedLabel.rxFastLinear), status_n = as.numeric(Status)), transformObjects = list(myTransform = tobinary),             removeMissings = TRUE, overwrite = TRUE)
rxRoc("status_n", "lrp",scores.csv)
fitRoc <- rxRoc("status_n", "lrp",scores)
rxDataStep(inData = fitScores, outFile = scores,             transforms = list(lrp = as.numeric(PredictedLabel.rxFastLinear)-1, status_n = as.numeric(Status)-1), transformObjects = list(myTransform = tobinary),             removeMissings = TRUE, overwrite = TRUE)
rxRoc("status_n", "lrp",scores)
fitRoc <- rxRoc("status_n", "lrp",scores) rxAuc(fitRoc)
rxDataStep(inData = fitScores, outFile = scores,             transforms = list(lrp = myTransform(as.character(PredictedLabel.rxFastLinear)), status_n = myTransform(as.character(Status))), transformObjects = list(myTransform = tobinary),             removeMissings = TRUE, overwrite = TRUE)
as.character("1")
as.character("a")
as.character("a") == "a"
tobinary <- function(x) {     if (x == 'FullyPaid' ) {         1     }     else {         0     } }
rxDataStep(inData = fitScores, outFile = scores,             transforms = list(lrp = myTransform(as.character(PredictedLabel.rxFastLinear)), status_n = myTransform(as.character(Status))), transformObjects = list(myTransform = tobinary),             removeMissings = TRUE, overwrite = TRUE)
as.numeric(TRUE)
tobinary <- function(x) {     if (x == "FullyPaid" ) {         as.numeric(x == "FullyPaid")     }     else {         as.numeric(x == "FullyPaid")     } }
rxDataStep(inData = fitScores, outFile = scores,             transforms = list(lrp = myTransform(as.character(PredictedLabel.rxFastLinear)), status_n = myTransform(as.character(Status))), transformObjects = list(myTransform = tobinary),             removeMissings = TRUE, overwrite = TRUE)
rxRoc("status_n", "lrp",scores)
fitRoc <- rxRoc("status_n", "lrp",scores) rxAuc(fitRoc)
rxDataStep(inData = fitScores, outFile = scores,             transforms = list(lrp = myTransform(as.character(PredictedLabel.rxLogisticRegression)), status_n = myTransform(as.character(Status))), transformObjects = list(myTransform = tobinary),             removeMissings = TRUE, overwrite = TRUE)
fitRoc <- rxRoc("status_n", "lrp",scores) rxAuc(fitRoc)
paste("Probability",                  c("rxLogisticRegression", "rxFastLinear", "rxFastTrees",                    "rxFastForest", "rxNeuralNet"),                  sep = ".")
rxRoc("status_n", "Probability.rxLogisticRegression.FullyPaid",scores)
fitRoc <- rxRoc("status_n", "Probability.rxLogisticRegression.FullyPaid",scores) rxAuc(fitRoc)
fitRoc <- rxRoc("Status", paste("PredictedLabel", c("rxLogisticRegression.FullyPaid", "rxFastLinear.FullyPaid", "rxFastTrees.FullyPaid", "rxFastForest.FullyPaid", "rxNeuralNet.FullyPaid"), sep = "."), scores)
fitRoc <- rxRoc("status_n", paste("Probability", c("rxLogisticRegression.FullyPaid", "rxFastLinear.FullyPaid", "rxFastTrees.FullyPaid", "rxFastForest.FullyPaid", "rxNeuralNet.FullyPaid"), sep = "."), scores) #fitRoc <- rxRoc("status_n", "Probability.rxLogisticRegression.FullyPaid", scores) rxAuc(fitRoc)
plot(fitRoc)
list(rxLogisticRegression = rxLogisticRegressionFit,          rxFastLinear = rxFastLinearFit,          rxFastTrees = rxFastTreesFit,          rxFastForest = rxFastForestFit,          rxNeuralNet = rxNeuralNetFit)
fitList <-    list( rxLogisticRegression = rxLogisticRegressionFit,                     rxFastLinear = rxFastLinearFit,                     rxFastTrees = rxFastTreesFit,                     rxFastForest = rxFastForestFit,                     rxNeuralNet = rxNeuralNetFit) # Compute the fit models's AUCs. fitAuc <- rxAuc(fitRoc) names(fitAuc) <- substring(names(fitAuc), nchar("Probability.") + 1)
names(which.max(fitAuc))
bestFitName <- names(which.max(fitAuc)) # Select the fit model with the largest AUC. bestFit <- fitList[[bestFitName]]
cat("Fit model AUCs:\n") print(fitAuc, digits = 2) # Report the best fit. cat(paste0("Best fit model with ", bestFitName,            ", AUC = ", signif(fitAuc[[bestFitName]], digits = 2),            ".\n"))
library(RevoScaleR) inputFile <- file.path(getwd(), "loansclean.csv") outputFilexdf <- file.path(getwd(), "loansclean.xdf") transformedxdf <- file.path(getwd(), "transform.xdf") rxImport(inputFile, outputFilexdf) normalize <- function(x) {     log(x) } transformamount <- function(amount, monthlydebt, term) {     if (amount == 99999999 & term == 'Short Term') {         log(monthlydebt * 18)     }     else {         if (amount == 99999999 & term == 'Long Term') {             log(monthlydebt * 180)         } else {             log(amount)         }     } } modelparameters <- c("Status", "Amount", "Term", "CrdtScore", "YearsJob", "HomeOwnshp","AnnlIncome", "Purpose","MthlyDebt", "YearsCrdtHist","Bankrptcies","TaxLiens","Dfactor","crdtusage") dropfeautures <- c("LoanID","CustomerID","CrdtProbs","CrdtProbsnew","Purpose.new","risk") rxDataStep(inData = outputFilexdf, outFile = transformedxdf,             transforms = list(Status = as.factor(Status), CrdtScore = myTransform(CrdtScore), crdtusage = (CrdtBal / OpenCrdt),             DFactor = cut(MthsLastDlqntnew, breaks = c(-2, 0, 5, 15, 30,60,150), labels = c("Unknown", "VeryLow", "Low","Medium","High","Very High")),             Term = as.factor(Term), YearsJob = as.factor(YearsJob), HomeOwnshp = as.factor(HomeOwnshp), Purpose = as.factor(Purpose),             AnnlIncome = myTransform(AnnlIncome), MthlyDebt = myTransform(MthlyDebt), Amount = myTransform1(Amount, MthlyDebt, Term)), transformObjects = list(myTransform = normalize, myTransform1 = transformamount),             removeMissings = TRUE, overwrite = TRUE, varsToDrop = dropfeautures) rxGetVarInfo(transformedxdf) # Set the random seed for reproducibility of randomness. set.seed(4253, "L'Ecuyer-CMRG") # Randomly split the data 80-20 between train and test sets. dataProb <- c(Train = 0.8, Test = 0.2) dataSplit <-rxSplit(transformedxdf, splitByFactor = "splitVar",transforms = list(splitVar =sample(dataFactor,size = .rxNumRows,replace = TRUE,                                        prob = dataProb)),                                        transformObjects =list(dataProb = dataProb,dataFactor = factor(names(dataProb),levels = names(dataProb))),outFilesBase = "loans") # Name the train and test datasets. dataTrain <- dataSplit[[1]] dataTest <- dataSplit[[2]] names(dataTrain) #allVars <- names(dataTrain) # The other variables are the record's properties. #xVars <- setdiff(allVars, c("UserId", "Label", "splitVar")) # The model is a formula that says that churners are to be # identified using the other variables. #model <- formula(paste("Label ~", paste(xVars, collapse = " + "))) model <- formula("Status ~ Amount + Term + CrdtScore + YearsJob + HomeOwnshp + AnnlIncome + Purpose + MthlyDebt + YearsCrdtHist + crdtusage + DFactor") rxLogisticRegressionFit <- rxLogisticRegression(model, data = dataTrain) rxFastLinearFit <- rxFastLinear(model, data = dataTrain) rxFastTreesFit <- rxFastTrees(model, data = dataTrain, randomSeed = 23648) rxFastForestFit <- rxFastForest(model, data = dataTrain, randomSeed = 23648) rxNeuralNetFit <- rxNeuralNet(model, data = dataTrain) fitScores <-  rxPredict(rxLogisticRegressionFit, dataTest, suffix = ".rxLogisticRegression",               extraVarsToWrite = names(dataTest),               outData = tempfile(fileext = ".xdf")) fitScores <- rxPredict(rxFastLinearFit, fitScores, suffix = ".rxFastLinear",               extraVarsToWrite = names(fitScores),               outData = tempfile(fileext = ".xdf")) fitScores <- rxPredict(rxFastTreesFit, fitScores, suffix = ".rxFastTrees",               extraVarsToWrite = names(fitScores),               outData = tempfile(fileext = ".xdf")) fitScores <- rxPredict(rxFastForestFit, fitScores, suffix = ".rxFastForest",               extraVarsToWrite = names(fitScores),               outData = tempfile(fileext = ".xdf")) fitScores <- rxPredict(rxNeuralNetFit, fitScores, suffix = ".rxNeuralNet",               extraVarsToWrite = names(fitScores),               outData = tempfile(fileext = ".xdf")) scores <- file.path(getwd(), "scores.xdf") tobinary <- function(x) {     if (x == "FullyPaid" ) {         as.numeric(x == "FullyPaid")     }     else {         as.numeric(x == "FullyPaid")     } } rxDataStep(inData = fitScores, outFile = scores,             transforms = list(status_n = myTransform(as.character(Status))), transformObjects = list(myTransform = tobinary),             removeMissings = TRUE, overwrite = TRUE) fitRoc <- rxRoc("status_n", paste("Probability", c("rxLogisticRegression.FullyPaid", "rxFastLinear.FullyPaid", "rxFastTrees.FullyPaid", "rxFastForest.FullyPaid", "rxNeuralNet.FullyPaid"), sep = "."), scores) plot(fitRoc) fitList <-    list( rxLogisticRegression = rxLogisticRegressionFit,                     rxFastLinear = rxFastLinearFit,                     rxFastTrees = rxFastTreesFit,                     rxFastForest = rxFastForestFit,                     rxNeuralNet = rxNeuralNetFit) # Compute the fit models's AUCs. fitAuc <- rxAuc(fitRoc) names(fitAuc) <- substring(names(fitAuc), nchar("Probability.") + 1) # Find the name of the fit with the largest AUC. bestFitName <- names(which.max(fitAuc)) # Select the fit model with the largest AUC. bestFit <- fitList[[bestFitName]] # Report the fit AUCs. cat("Fit model AUCs:\n") print(fitAuc, digits = 2) # Report the best fit. cat(paste0("Best fit model with ", bestFitName,            ", AUC = ", signif(fitAuc[[bestFitName]], digits = 2),            ".\n"))
library(RevoScaleR) inputFile <- file.path(getwd(), "loansclean.csv") outputFilexdf <- file.path(getwd(), "loansclean.xdf") transformedxdf <- file.path(getwd(), "transform.xdf") rxImport(inputFile, outputFilexdf) normalize <- function(x) {     log(x) } transformamount <- function(amount, monthlydebt, term) {     if (amount == 99999999 & term == 'Short Term') {         log(monthlydebt * 18)     }     else {         if (amount == 99999999 & term == 'Long Term') {             log(monthlydebt * 180)         } else {             log(amount)         }     } } #modelparameters <- c("Status", "Amount", "Term", "CrdtScore", "YearsJob", "HomeOwnshp","AnnlIncome", "Purpose","MthlyDebt", "YearsCrdtHist","Bankrptcies","TaxLiens","Dfactor","crdtusage") modelparameters <- c("Status", "Amount", "Term", "CrdtScore", "YearsJob", "HomeOwnshp", "AnnlIncome", "Purpose", "MthlyDebt", "YearsCrdtHist", "Bankrptcies", "TaxLiens", "Dfactor", "crdtusage") dropfeautures <- c("LoanID","CustomerID","CrdtProbs","CrdtProbsnew","Purpose.new","risk") rxDataStep(inData = outputFilexdf, outFile = transformedxdf,             transforms = list(Status = as.factor(Status), CrdtScore = myTransform(CrdtScore), crdtusage = (CrdtBal / OpenCrdt), debttoincome = (MthlyDebt / AnnlIncome),             DFactor = cut(MthsLastDlqntnew, breaks = c(-2, 0, 5, 15, 30,60,150), labels = c("Unknown", "VeryLow", "Low","Medium","High","Very High")),             Term = as.factor(Term), YearsJob = as.factor(YearsJob), HomeOwnshp = as.factor(HomeOwnshp), Purpose = as.factor(Purpose),             AnnlIncome = myTransform(AnnlIncome), MthlyDebt = myTransform(MthlyDebt), Amount = myTransform1(Amount, MthlyDebt, Term)), transformObjects = list(myTransform = normalize, myTransform1 = transformamount),             removeMissings = TRUE, overwrite = TRUE, varsToDrop = dropfeautures) rxGetVarInfo(transformedxdf) # Set the random seed for reproducibility of randomness. set.seed(4253, "L'Ecuyer-CMRG") # Randomly split the data 80-20 between train and test sets. dataProb <- c(Train = 0.8, Test = 0.2) dataSplit <-rxSplit(transformedxdf, splitByFactor = "splitVar",transforms = list(splitVar =sample(dataFactor,size = .rxNumRows,replace = TRUE,                                        prob = dataProb)),                                        transformObjects =list(dataProb = dataProb,dataFactor = factor(names(dataProb),levels = names(dataProb))),outFilesBase = "loans") # Name the train and test datasets. dataTrain <- dataSplit[[1]] dataTest <- dataSplit[[2]] names(dataTrain) model <- formula("Status ~ Amount + Term + CrdtScore + YearsJob + HomeOwnshp  + Purpose + debttoincome + YearsCrdtHist + crdtusage + DFactor") rxLogisticRegressionFit <- rxLogisticRegression(model, data = dataTrain) rxFastLinearFit <- rxFastLinear(model, data = dataTrain) rxFastTreesFit <- rxFastTrees(model, data = dataTrain, randomSeed = 23648) rxFastForestFit <- rxFastForest(model, data = dataTrain, randomSeed = 23648) rxNeuralNetFit <- rxNeuralNet(model, data = dataTrain) fitScores <-  rxPredict(rxLogisticRegressionFit, dataTest, suffix = ".rxLogisticRegression",               extraVarsToWrite = names(dataTest),               outData = tempfile(fileext = ".xdf")) fitScores <- rxPredict(rxFastLinearFit, fitScores, suffix = ".rxFastLinear",               extraVarsToWrite = names(fitScores),               outData = tempfile(fileext = ".xdf")) fitScores <- rxPredict(rxFastTreesFit, fitScores, suffix = ".rxFastTrees",               extraVarsToWrite = names(fitScores),               outData = tempfile(fileext = ".xdf")) fitScores <- rxPredict(rxFastForestFit, fitScores, suffix = ".rxFastForest",               extraVarsToWrite = names(fitScores),               outData = tempfile(fileext = ".xdf")) fitScores <- rxPredict(rxNeuralNetFit, fitScores, suffix = ".rxNeuralNet",               extraVarsToWrite = names(fitScores),               outData = tempfile(fileext = ".xdf")) scores <- file.path(getwd(), "scores.xdf") tobinary <- function(x) {     if (x == "FullyPaid" ) {         as.numeric(x == "FullyPaid")     }     else {         as.numeric(x == "FullyPaid")     } } rxDataStep(inData = fitScores, outFile = scores,             transforms = list(status_n = myTransform(as.character(Status))), transformObjects = list(myTransform = tobinary),             removeMissings = TRUE, overwrite = TRUE) fitRoc <- rxRoc("status_n", paste("Probability", c("rxLogisticRegression.FullyPaid", "rxFastLinear.FullyPaid", "rxFastTrees.FullyPaid", "rxFastForest.FullyPaid", "rxNeuralNet.FullyPaid"), sep = "."), scores) plot(fitRoc) fitList <-    list( rxLogisticRegression = rxLogisticRegressionFit,                     rxFastLinear = rxFastLinearFit,                     rxFastTrees = rxFastTreesFit,                     rxFastForest = rxFastForestFit,                     rxNeuralNet = rxNeuralNetFit) # Compute the fit models's AUCs. fitAuc <- rxAuc(fitRoc) names(fitAuc) <- substring(names(fitAuc), nchar("Probability.") + 1) # Find the name of the fit with the largest AUC. bestFitName <- names(which.max(fitAuc)) # Select the fit model with the largest AUC. bestFit <- fitList[[bestFitName]] # Report the fit AUCs. cat("Fit model AUCs:\n") print(fitAuc, digits = 2) # Report the best fit. cat(paste0("Best fit model with ", bestFitName,            ", AUC = ", signif(fitAuc[[bestFitName]], digits = 2),            ".\n"))
library(RevoScaleR) inputFile <- file.path(getwd(), "loansclean.csv") outputFilexdf <- file.path(getwd(), "loansclean.xdf") transformedxdf <- file.path(getwd(), "transform.xdf") rxImport(inputFile, outputFilexdf) normalize <- function(x) {     log(x) } transformamount <- function(amount, monthlydebt, term) {     if (amount == 99999999 & term == 'Short Term') {         log(monthlydebt * 18)     }     else {         if (amount == 99999999 & term == 'Long Term') {             log(monthlydebt * 180)         } else {             log(amount)         }     } } #modelparameters <- c("Status", "Amount", "Term", "CrdtScore", "YearsJob", "HomeOwnshp","AnnlIncome", "Purpose","MthlyDebt", "YearsCrdtHist","Bankrptcies","TaxLiens","Dfactor","crdtusage") modelparameters <- c("Status", "Amount", "Term", "CrdtScore", "YearsJob", "HomeOwnshp", "AnnlIncome", "Purpose", "MthlyDebt", "YearsCrdtHist", "Bankrptcies", "TaxLiens", "Dfactor", "crdtusage") dropfeautures <- c("LoanID","CustomerID","CrdtProbs","CrdtProbsnew","Purpose.new","risk") rxDataStep(inData = outputFilexdf, outFile = transformedxdf,             transforms = list(Status = as.factor(Status), CrdtScore = myTransform(CrdtScore), crdtusage = (CrdtBal / OpenCrdt), debttoincome = (MthlyDebt / AnnlIncome),             DFactor = cut(MthsLastDlqntnew, breaks = c(-2, 0, 5, 15, 30,60,150), labels = c("Unknown", "VeryLow", "Low","Medium","High","Very High")),             Term = as.factor(Term), YearsJob = as.factor(YearsJob), HomeOwnshp = as.factor(HomeOwnshp), Purpose = as.factor(Purpose),             AnnlIncome = myTransform(AnnlIncome), MthlyDebt = myTransform(MthlyDebt), Amount = myTransform1(Amount, MthlyDebt, Term)), transformObjects = list(myTransform = normalize, myTransform1 = transformamount),             removeMissings = TRUE, overwrite = TRUE, varsToDrop = dropfeautures) rxGetVarInfo(transformedxdf) # Set the random seed for reproducibility of randomness. set.seed(4253, "L'Ecuyer-CMRG") # Randomly split the data 80-20 between train and test sets. dataProb <- c(Train = 0.8, Test = 0.2) dataSplit <-rxSplit(transformedxdf, splitByFactor = "splitVar",transforms = list(splitVar =sample(dataFactor,size = .rxNumRows,replace = TRUE,                                        prob = dataProb)),                                        transformObjects =list(dataProb = dataProb,dataFactor = factor(names(dataProb),levels = names(dataProb))),outFilesBase = "loans") # Name the train and test datasets. dataTrain <- dataSplit[[1]] dataTest <- dataSplit[[2]] names(dataTrain) #model <- formula("Status ~ Amount + Term + CrdtScore + YearsJob + HomeOwnshp  + Purpose + debttoincome + YearsCrdtHist + crdtusage + DFactor") model <- formula("Status ~ Amount + Term + CrdtScore + YearsJob + HomeOwnshp  + Purpose + debttoincome + YearsCrdtHist + crdtusage ") rxLogisticRegressionFit <- rxLogisticRegression(model, data = dataTrain) rxFastLinearFit <- rxFastLinear(model, data = dataTrain) rxFastTreesFit <- rxFastTrees(model, data = dataTrain, randomSeed = 23648) rxFastForestFit <- rxFastForest(model, data = dataTrain, randomSeed = 23648) rxNeuralNetFit <- rxNeuralNet(model, data = dataTrain) fitScores <-  rxPredict(rxLogisticRegressionFit, dataTest, suffix = ".rxLogisticRegression",               extraVarsToWrite = names(dataTest),               outData = tempfile(fileext = ".xdf")) fitScores <- rxPredict(rxFastLinearFit, fitScores, suffix = ".rxFastLinear",               extraVarsToWrite = names(fitScores),               outData = tempfile(fileext = ".xdf")) fitScores <- rxPredict(rxFastTreesFit, fitScores, suffix = ".rxFastTrees",               extraVarsToWrite = names(fitScores),               outData = tempfile(fileext = ".xdf")) fitScores <- rxPredict(rxFastForestFit, fitScores, suffix = ".rxFastForest",               extraVarsToWrite = names(fitScores),               outData = tempfile(fileext = ".xdf")) fitScores <- rxPredict(rxNeuralNetFit, fitScores, suffix = ".rxNeuralNet",               extraVarsToWrite = names(fitScores),               outData = tempfile(fileext = ".xdf")) scores <- file.path(getwd(), "scores.xdf") tobinary <- function(x) {     if (x == "FullyPaid" ) {         as.numeric(x == "FullyPaid")     }     else {         as.numeric(x == "FullyPaid")     } } rxDataStep(inData = fitScores, outFile = scores,             transforms = list(status_n = myTransform(as.character(Status))), transformObjects = list(myTransform = tobinary),             removeMissings = TRUE, overwrite = TRUE) fitRoc <- rxRoc("status_n", paste("Probability", c("rxLogisticRegression.FullyPaid", "rxFastLinear.FullyPaid", "rxFastTrees.FullyPaid", "rxFastForest.FullyPaid", "rxNeuralNet.FullyPaid"), sep = "."), scores) plot(fitRoc) fitList <-    list( rxLogisticRegression = rxLogisticRegressionFit,                     rxFastLinear = rxFastLinearFit,                     rxFastTrees = rxFastTreesFit,                     rxFastForest = rxFastForestFit,                     rxNeuralNet = rxNeuralNetFit) # Compute the fit models's AUCs. fitAuc <- rxAuc(fitRoc) names(fitAuc) <- substring(names(fitAuc), nchar("Probability.") + 1) # Find the name of the fit with the largest AUC. bestFitName <- names(which.max(fitAuc)) # Select the fit model with the largest AUC. bestFit <- fitList[[bestFitName]] # Report the fit AUCs. cat("Fit model AUCs:\n") print(fitAuc, digits = 2) # Report the best fit. cat(paste0("Best fit model with ", bestFitName,            ", AUC = ", signif(fitAuc[[bestFitName]], digits = 2),            ".\n"))
library(RevoScaleR) inputFile <- file.path(getwd(), "loansclean.csv") outputFilexdf <- file.path(getwd(), "loansclean.xdf") transformedxdf <- file.path(getwd(), "transform.xdf") rxImport(inputFile, outputFilexdf) normalize <- function(x) {     log(x) } transformamount <- function(amount, monthlydebt, term) {     if (amount == 99999999 & term == 'Short Term') {         log(monthlydebt * 18)     }     else {         if (amount == 99999999 & term == 'Long Term') {             log(monthlydebt * 180)         } else {             log(amount)         }     } } #modelparameters <- c("Status", "Amount", "Term", "CrdtScore", "YearsJob", "HomeOwnshp","AnnlIncome", "Purpose","MthlyDebt", "YearsCrdtHist","Bankrptcies","TaxLiens","Dfactor","crdtusage") modelparameters <- c("Status", "Amount", "Term", "CrdtScore", "YearsJob", "HomeOwnshp", "AnnlIncome", "Purpose", "MthlyDebt", "YearsCrdtHist", "Bankrptcies", "TaxLiens", "Dfactor", "crdtusage") dropfeautures <- c("LoanID","CustomerID","CrdtProbs","CrdtProbsnew","Purpose.new","risk") rxDataStep(inData = outputFilexdf, outFile = transformedxdf,             transforms = list(Status = as.factor(Status), CrdtScore = myTransform(CrdtScore), crdtusage = (CrdtBal / OpenCrdt), debttoincome = (MthlyDebt / AnnlIncome),             DFactor = cut(MthsLastDlqntnew, breaks = c(-2, 0, 5, 15, 30,60,150), labels = c("Unknown", "VeryLow", "Low","Medium","High","Very High")),             Term = as.factor(Term), YearsJob = as.factor(YearsJob), HomeOwnshp = as.factor(HomeOwnshp), Purpose = as.factor(Purpose),             AnnlIncome = myTransform(AnnlIncome), MthlyDebt = myTransform(MthlyDebt), Amount = myTransform1(Amount, MthlyDebt, Term)), transformObjects = list(myTransform = normalize, myTransform1 = transformamount),             removeMissings = TRUE, overwrite = TRUE, varsToDrop = dropfeautures) rxGetVarInfo(transformedxdf) # Set the random seed for reproducibility of randomness. set.seed(4253, "L'Ecuyer-CMRG") # Randomly split the data 80-20 between train and test sets. dataProb <- c(Train = 0.8, Test = 0.2) dataSplit <-rxSplit(transformedxdf, splitByFactor = "splitVar",transforms = list(splitVar =sample(dataFactor,size = .rxNumRows,replace = TRUE,                                        prob = dataProb)),                                        transformObjects =list(dataProb = dataProb,dataFactor = factor(names(dataProb),levels = names(dataProb))),outFilesBase = "loans") # Name the train and test datasets. dataTrain <- dataSplit[[1]] dataTest <- dataSplit[[2]] names(dataTrain) model <- formula("Status ~ Amount + Term + CrdtScore + YearsJob + HomeOwnshp  + Purpose + debttoincome + YearsCrdtHist + crdtusage + DFactor") #model <- formula("Status ~ Amount + Term + CrdtScore + YearsJob + HomeOwnshp  + Purpose + debttoincome + YearsCrdtHist + crdtusage ") rxLogisticRegressionFit <- rxLogisticRegression(model, data = dataTrain) rxFastLinearFit <- rxFastLinear(model, data = dataTrain) rxFastTreesFit <- rxFastTrees(model, data = dataTrain, randomSeed = 23648) rxFastForestFit <- rxFastForest(model, data = dataTrain, randomSeed = 23648) rxNeuralNetFit <- rxNeuralNet(model, data = dataTrain) fitScores <-  rxPredict(rxLogisticRegressionFit, dataTest, suffix = ".rxLogisticRegression",               extraVarsToWrite = names(dataTest),               outData = tempfile(fileext = ".xdf")) fitScores <- rxPredict(rxFastLinearFit, fitScores, suffix = ".rxFastLinear",               extraVarsToWrite = names(fitScores),               outData = tempfile(fileext = ".xdf")) fitScores <- rxPredict(rxFastTreesFit, fitScores, suffix = ".rxFastTrees",               extraVarsToWrite = names(fitScores),               outData = tempfile(fileext = ".xdf")) fitScores <- rxPredict(rxFastForestFit, fitScores, suffix = ".rxFastForest",               extraVarsToWrite = names(fitScores),               outData = tempfile(fileext = ".xdf")) fitScores <- rxPredict(rxNeuralNetFit, fitScores, suffix = ".rxNeuralNet",               extraVarsToWrite = names(fitScores),               outData = tempfile(fileext = ".xdf")) scores <- file.path(getwd(), "scores.xdf") tobinary <- function(x) {     if (x == "FullyPaid" ) {         as.numeric(x == "FullyPaid")     }     else {         as.numeric(x == "FullyPaid")     } } rxDataStep(inData = fitScores, outFile = scores,             transforms = list(status_n = myTransform(as.character(Status))), transformObjects = list(myTransform = tobinary),             removeMissings = TRUE, overwrite = TRUE) fitRoc <- rxRoc("status_n", paste("Probability", c("rxLogisticRegression.FullyPaid", "rxFastLinear.FullyPaid", "rxFastTrees.FullyPaid", "rxFastForest.FullyPaid", "rxNeuralNet.FullyPaid"), sep = "."), scores) plot(fitRoc) fitList <-    list( rxLogisticRegression = rxLogisticRegressionFit,                     rxFastLinear = rxFastLinearFit,                     rxFastTrees = rxFastTreesFit,                     rxFastForest = rxFastForestFit,                     rxNeuralNet = rxNeuralNetFit) # Compute the fit models's AUCs. fitAuc <- rxAuc(fitRoc) names(fitAuc) <- substring(names(fitAuc), nchar("Probability.") + 1) # Find the name of the fit with the largest AUC. bestFitName <- names(which.max(fitAuc)) # Select the fit model with the largest AUC. bestFit <- fitList[[bestFitName]] # Report the fit AUCs. cat("Fit model AUCs:\n") print(fitAuc, digits = 2) # Report the best fit. cat(paste0("Best fit model with ", bestFitName,            ", AUC = ", signif(fitAuc[[bestFitName]], digits = 2),            ".\n"))
library(RevoScaleR) inputFile <- file.path(getwd(), "loansclean.csv") inputFile <- unique.data.frame(inputfile) outputFilexdf <- file.path(getwd(), "loansclean.xdf") transformedxdf <- file.path(getwd(), "transform.xdf") rxImport(inputFile, outputFilexdf) normalize <- function(x) {     log(x) } transformamount <- function(amount, monthlydebt, term) {     if (amount == 99999999 & term == 'Short Term') {         log(monthlydebt * 18)     }     else {         if (amount == 99999999 & term == 'Long Term') {             log(monthlydebt * 180)         } else {             log(amount)         }     } } #modelparameters <- c("Status", "Amount", "Term", "CrdtScore", "YearsJob", "HomeOwnshp","AnnlIncome", "Purpose","MthlyDebt", "YearsCrdtHist","Bankrptcies","TaxLiens","Dfactor","crdtusage") modelparameters <- c("Status", "Amount", "Term", "CrdtScore", "YearsJob", "HomeOwnshp", "AnnlIncome", "Purpose", "MthlyDebt", "YearsCrdtHist", "Bankrptcies", "TaxLiens", "Dfactor", "crdtusage") dropfeautures <- c("LoanID","CustomerID","CrdtProbs","CrdtProbsnew","Purpose.new","risk") rxDataStep(inData = outputFilexdf, outFile = transformedxdf,             transforms = list(Status = as.factor(Status), CrdtScore = myTransform(CrdtScore), crdtusage = (CrdtBal / OpenCrdt), debttoincome = (MthlyDebt / AnnlIncome),             DFactor = cut(MthsLastDlqntnew, breaks = c(-2, 0, 5, 15, 30,60,150), labels = c("Unknown", "VeryLow", "Low","Medium","High","Very High")),             Term = as.factor(Term), YearsJob = as.factor(YearsJob), HomeOwnshp = as.factor(HomeOwnshp), Purpose = as.factor(Purpose),             AnnlIncome = myTransform(AnnlIncome), MthlyDebt = myTransform(MthlyDebt), Amount = myTransform1(Amount, MthlyDebt, Term)), transformObjects = list(myTransform = normalize, myTransform1 = transformamount),             removeMissings = TRUE, overwrite = TRUE, varsToDrop = dropfeautures) rxGetVarInfo(transformedxdf) # Set the random seed for reproducibility of randomness. set.seed(4253, "L'Ecuyer-CMRG") # Randomly split the data 80-20 between train and test sets. dataProb <- c(Train = 0.8, Test = 0.2) dataSplit <-rxSplit(transformedxdf, splitByFactor = "splitVar",transforms = list(splitVar =sample(dataFactor,size = .rxNumRows,replace = TRUE,                                        prob = dataProb)),                                        transformObjects =list(dataProb = dataProb,dataFactor = factor(names(dataProb),levels = names(dataProb))),outFilesBase = "loans") # Name the train and test datasets. dataTrain <- dataSplit[[1]] dataTest <- dataSplit[[2]] names(dataTrain) model <- formula("Status ~ Amount + Term + CrdtScore + YearsJob + HomeOwnshp  + Purpose + debttoincome + YearsCrdtHist + crdtusage + DFactor") #model <- formula("Status ~ Amount + Term + CrdtScore + YearsJob + HomeOwnshp  + Purpose + debttoincome + YearsCrdtHist + crdtusage ") rxLogisticRegressionFit <- rxLogisticRegression(model, data = dataTrain) rxFastLinearFit <- rxFastLinear(model, data = dataTrain) rxFastTreesFit <- rxFastTrees(model, data = dataTrain, randomSeed = 23648) rxFastForestFit <- rxFastForest(model, data = dataTrain, randomSeed = 23648) rxNeuralNetFit <- rxNeuralNet(model, data = dataTrain) fitScores <-  rxPredict(rxLogisticRegressionFit, dataTest, suffix = ".rxLogisticRegression",               extraVarsToWrite = names(dataTest),               outData = tempfile(fileext = ".xdf")) fitScores <- rxPredict(rxFastLinearFit, fitScores, suffix = ".rxFastLinear",               extraVarsToWrite = names(fitScores),               outData = tempfile(fileext = ".xdf")) fitScores <- rxPredict(rxFastTreesFit, fitScores, suffix = ".rxFastTrees",               extraVarsToWrite = names(fitScores),               outData = tempfile(fileext = ".xdf")) fitScores <- rxPredict(rxFastForestFit, fitScores, suffix = ".rxFastForest",               extraVarsToWrite = names(fitScores),               outData = tempfile(fileext = ".xdf")) fitScores <- rxPredict(rxNeuralNetFit, fitScores, suffix = ".rxNeuralNet",               extraVarsToWrite = names(fitScores),               outData = tempfile(fileext = ".xdf")) scores <- file.path(getwd(), "scores.xdf") tobinary <- function(x) {     if (x == "FullyPaid" ) {         as.numeric(x == "FullyPaid")     }     else {         as.numeric(x == "FullyPaid")     } } rxDataStep(inData = fitScores, outFile = scores,             transforms = list(status_n = myTransform(as.character(Status))), transformObjects = list(myTransform = tobinary),             removeMissings = TRUE, overwrite = TRUE) fitRoc <- rxRoc("status_n", paste("Probability", c("rxLogisticRegression.FullyPaid", "rxFastLinear.FullyPaid", "rxFastTrees.FullyPaid", "rxFastForest.FullyPaid", "rxNeuralNet.FullyPaid"), sep = "."), scores) plot(fitRoc) fitList <-    list( rxLogisticRegression = rxLogisticRegressionFit,                     rxFastLinear = rxFastLinearFit,                     rxFastTrees = rxFastTreesFit,                     rxFastForest = rxFastForestFit,                     rxNeuralNet = rxNeuralNetFit) # Compute the fit models's AUCs. fitAuc <- rxAuc(fitRoc) names(fitAuc) <- substring(names(fitAuc), nchar("Probability.") + 1) # Find the name of the fit with the largest AUC. bestFitName <- names(which.max(fitAuc)) # Select the fit model with the largest AUC. bestFit <- fitList[[bestFitName]] # Report the fit AUCs. cat("Fit model AUCs:\n") print(fitAuc, digits = 2) # Report the best fit. cat(paste0("Best fit model with ", bestFitName,            ", AUC = ", signif(fitAuc[[bestFitName]], digits = 2),            ".\n"))
library(RevoScaleR) inputFile <- file.path(getwd(), "loansclean.csv") inputFile <- unique.data.frame(inputFile) outputFilexdf <- file.path(getwd(), "loansclean.xdf") transformedxdf <- file.path(getwd(), "transform.xdf") rxImport(inputFile, outputFilexdf) normalize <- function(x) {     log(x) } transformamount <- function(amount, monthlydebt, term) {     if (amount == 99999999 & term == 'Short Term') {         log(monthlydebt * 18)     }     else {         if (amount == 99999999 & term == 'Long Term') {             log(monthlydebt * 180)         } else {             log(amount)         }     } } #modelparameters <- c("Status", "Amount", "Term", "CrdtScore", "YearsJob", "HomeOwnshp","AnnlIncome", "Purpose","MthlyDebt", "YearsCrdtHist","Bankrptcies","TaxLiens","Dfactor","crdtusage") modelparameters <- c("Status", "Amount", "Term", "CrdtScore", "YearsJob", "HomeOwnshp", "AnnlIncome", "Purpose", "MthlyDebt", "YearsCrdtHist", "Bankrptcies", "TaxLiens", "Dfactor", "crdtusage") dropfeautures <- c("LoanID","CustomerID","CrdtProbs","CrdtProbsnew","Purpose.new","risk") rxDataStep(inData = outputFilexdf, outFile = transformedxdf,             transforms = list(Status = as.factor(Status), CrdtScore = myTransform(CrdtScore), crdtusage = (CrdtBal / OpenCrdt), debttoincome = (MthlyDebt / AnnlIncome),             DFactor = cut(MthsLastDlqntnew, breaks = c(-2, 0, 5, 15, 30,60,150), labels = c("Unknown", "VeryLow", "Low","Medium","High","Very High")),             Term = as.factor(Term), YearsJob = as.factor(YearsJob), HomeOwnshp = as.factor(HomeOwnshp), Purpose = as.factor(Purpose),             AnnlIncome = myTransform(AnnlIncome), MthlyDebt = myTransform(MthlyDebt), Amount = myTransform1(Amount, MthlyDebt, Term)), transformObjects = list(myTransform = normalize, myTransform1 = transformamount),             removeMissings = TRUE, overwrite = TRUE, varsToDrop = dropfeautures) rxGetVarInfo(transformedxdf) # Set the random seed for reproducibility of randomness. set.seed(4253, "L'Ecuyer-CMRG") # Randomly split the data 80-20 between train and test sets. dataProb <- c(Train = 0.8, Test = 0.2) dataSplit <-rxSplit(transformedxdf, splitByFactor = "splitVar",transforms = list(splitVar =sample(dataFactor,size = .rxNumRows,replace = TRUE,                                        prob = dataProb)),                                        transformObjects =list(dataProb = dataProb,dataFactor = factor(names(dataProb),levels = names(dataProb))),outFilesBase = "loans") # Name the train and test datasets. dataTrain <- dataSplit[[1]] dataTest <- dataSplit[[2]] names(dataTrain) model <- formula("Status ~ Amount + Term + CrdtScore + YearsJob + HomeOwnshp  + Purpose + debttoincome + YearsCrdtHist + crdtusage + DFactor") #model <- formula("Status ~ Amount + Term + CrdtScore + YearsJob + HomeOwnshp  + Purpose + debttoincome + YearsCrdtHist + crdtusage ") rxLogisticRegressionFit <- rxLogisticRegression(model, data = dataTrain) rxFastLinearFit <- rxFastLinear(model, data = dataTrain) rxFastTreesFit <- rxFastTrees(model, data = dataTrain, randomSeed = 23648) rxFastForestFit <- rxFastForest(model, data = dataTrain, randomSeed = 23648) rxNeuralNetFit <- rxNeuralNet(model, data = dataTrain) fitScores <-  rxPredict(rxLogisticRegressionFit, dataTest, suffix = ".rxLogisticRegression",               extraVarsToWrite = names(dataTest),               outData = tempfile(fileext = ".xdf")) fitScores <- rxPredict(rxFastLinearFit, fitScores, suffix = ".rxFastLinear",               extraVarsToWrite = names(fitScores),               outData = tempfile(fileext = ".xdf")) fitScores <- rxPredict(rxFastTreesFit, fitScores, suffix = ".rxFastTrees",               extraVarsToWrite = names(fitScores),               outData = tempfile(fileext = ".xdf")) fitScores <- rxPredict(rxFastForestFit, fitScores, suffix = ".rxFastForest",               extraVarsToWrite = names(fitScores),               outData = tempfile(fileext = ".xdf")) fitScores <- rxPredict(rxNeuralNetFit, fitScores, suffix = ".rxNeuralNet",               extraVarsToWrite = names(fitScores),               outData = tempfile(fileext = ".xdf")) scores <- file.path(getwd(), "scores.xdf") tobinary <- function(x) {     if (x == "FullyPaid" ) {         as.numeric(x == "FullyPaid")     }     else {         as.numeric(x == "FullyPaid")     } } rxDataStep(inData = fitScores, outFile = scores,             transforms = list(status_n = myTransform(as.character(Status))), transformObjects = list(myTransform = tobinary),             removeMissings = TRUE, overwrite = TRUE) fitRoc <- rxRoc("status_n", paste("Probability", c("rxLogisticRegression.FullyPaid", "rxFastLinear.FullyPaid", "rxFastTrees.FullyPaid", "rxFastForest.FullyPaid", "rxNeuralNet.FullyPaid"), sep = "."), scores) plot(fitRoc) fitList <-    list( rxLogisticRegression = rxLogisticRegressionFit,                     rxFastLinear = rxFastLinearFit,                     rxFastTrees = rxFastTreesFit,                     rxFastForest = rxFastForestFit,                     rxNeuralNet = rxNeuralNetFit) # Compute the fit models's AUCs. fitAuc <- rxAuc(fitRoc) names(fitAuc) <- substring(names(fitAuc), nchar("Probability.") + 1) # Find the name of the fit with the largest AUC. bestFitName <- names(which.max(fitAuc)) # Select the fit model with the largest AUC. bestFit <- fitList[[bestFitName]] # Report the fit AUCs. cat("Fit model AUCs:\n") print(fitAuc, digits = 2) # Report the best fit. cat(paste0("Best fit model with ", bestFitName,            ", AUC = ", signif(fitAuc[[bestFitName]], digits = 2),            ".\n"))
